openapi: 3.1.0
info:
  title: ApeRAG API
  description: ApeRAG API Documentation
  version: 1.0.0
servers:
  - url: /api/v1
    description: API v1
paths:
  /bots:
    get:
      summary: List bots
      description: Get a list of bots
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of bots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/botList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new bot
      description: Create a new bot
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/botCreate'
      responses:
        '200':
          description: Bot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bot'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}:
    get:
      summary: Get bot details
      description: Get details of a specific bot
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bot details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bot'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Bot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a bot
      description: Delete a bot (idempotent operation)
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Bot deleted successfully (or already deleted)
    put:
      summary: Update a bot
      description: Update a bot
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/botUpdate'
      responses:
        '200':
          description: Bot updated successfully
  /bots/{bot_id}/flow:
    get:
      summary: Get flow
      description: Get flow
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get flow successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDefinition'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update flow
      description: Update flow
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowDefinition'
      responses:
        '200':
          description: Flow debugged successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/flow/debug:
    post:
      summary: Debug a flow
      description: Debug a flow
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/debugFlowRequest'
      responses:
        '200':
          description: Flow debugged successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats:
    get:
      summary: List chats
      description: Get a paginated list of chats
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (1-based)
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of items per page
      responses:
        '200':
          description: Paginated list of chats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new chat
      description: Create a new chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatCreate'
      responses:
        '201':
          description: Chat created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats/{chat_id}:
    get:
      summary: Get chat details
      description: Get details of a specific chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update a chat
      description: Update a chat
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatUpdate'
      responses:
        '200':
          description: Chat updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a chat
      description: Delete a chat (idempotent operation)
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Chat deleted successfully (or already deleted)
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats/{chat_id}/title:
    post:
      summary: Generate a chat title
      description: Generate a short title for the chat based on recent conversation content
      security:
        - BearerAuth: []
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/titleGenerateRequest'
      responses:
        '200':
          description: Generated title
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/titleGenerateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Chat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /bots/{bot_id}/chats/{chat_id}/messages/{message_id}:
    post:
      summary: Feedback a message
      description: Feedback a message
      parameters:
        - name: bot_id
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/feedback'
      responses:
        '200':
          description: A message
  /chats/{chat_id}/documents:
    post:
      summary: Upload document to chat
      description: Upload a document file to a chat session for temporary knowledge augmentation
      tags:
        - chat-documents
      security:
        - BearerAuth: []
        - CookieAuth: []
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
          description: Chat session ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Document file to upload
                message_id:
                  type: string
                  description: Message ID to associate the document with
              required:
                - file
                - message_id
      responses:
        '200':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Chat not found
  /chats/{chat_id}/documents/{document_id}:
    get:
      summary: Get chat document details
      description: Get details of a specific document in a chat session
      tags:
        - chat-documents
      security:
        - BearerAuth: []
        - CookieAuth: []
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
          description: Chat session ID
        - name: document_id
          in: path
          required: true
          schema:
            type: string
          description: Document ID
      responses:
        '200':
          description: Document details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
        '401':
          description: Unauthorized
        '404':
          description: Document or chat not found
  /collections:
    get:
      summary: List collections
      description: Get a list of collections (owned and optionally subscribed)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
        - name: include_subscribed
          in: query
          schema:
            type: boolean
            default: true
          description: Whether to include subscribed collections in results
      responses:
        '200':
          description: List of collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collectionViewList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new collection
      description: Create a new collection
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collectionCreate'
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
  /collections/{collection_id}:
    get:
      summary: Get collection details
      description: Get details of a specific collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a collection
      description: Delete a collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Collection deleted successfully
    put:
      summary: Update a collection
      description: Update a collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collectionUpdate'
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
  /collections/{collection_id}/summary/generate:
    post:
      summary: Generate collection summary
      description: Trigger collection summary generation as background task
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection summary generation started
          content:
            application/json:
              schema:
                type: object
                properties:
                  collection_id:
                    type: string
                  success:
                    type: boolean
                  message:
                    type: string
                  status:
                    type: string
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/documents:
    get:
      summary: List documents
      description: Get a paginated list of documents with sorting and search capabilities
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (1-based)
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - name
              - created
              - updated
              - size
              - status
          description: Field to sort by
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Sort order
        - name: search
          in: query
          schema:
            type: string
          description: Search documents by name
      responses:
        '200':
          description: Paginated list of documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new document
      description: Create a new document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documentCreate'
      responses:
        '200':
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/documents/{document_id}:
    get:
      summary: Get document details
      description: Get details of a specific document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a document
      description: Delete a document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Document deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/documents/{document_id}/rebuild_indexes:
    post:
      summary: Rebuild document indexes
      description: Rebuild specified types of indexes for a document
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rebuildIndexesRequest'
      responses:
        '204':
          description: Index rebuild initiated successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/rebuild_failed_indexes:
    post:
      summary: Rebuild all failed indexes in collection
      description: Rebuild all failed indexes for all documents in the specified collection
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Failed indexes rebuild initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  affected_documents:
                    type: integer
                    description: Number of documents with failed indexes that will be rebuilt
                required:
                  - code
                  - message
                  - affected_documents
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/documents/{document_id}/preview:
    get:
      summary: Get document preview
      description: Get a preview of a specific document
      operationId: get_document_preview
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document preview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentPreview'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/documents/{document_id}/object:
    get:
      summary: Get document object
      description: Get an object from a specific document
      operationId: get_document_object
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document object
          content:
            application/octet-stream: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/documents/upload:
    post:
      summary: Upload a single document
      description: Upload a single document file to temporary storage (UPLOADED status)
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Document file to upload
              required:
                - file
      responses:
        '200':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uploadDocumentResponse'
        '400':
          description: Bad request - invalid file or file too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/documents/confirm:
    post:
      summary: Confirm documents to collection
      description: Confirm uploaded documents and add them to the collection (change status from UPLOADED to PENDING)
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/confirmDocumentsRequest'
      responses:
        '200':
          description: Documents confirmed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/confirmDocumentsResponse'
        '400':
          description: Bad request - invalid document IDs or quota exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/searches:
    get:
      summary: Get search history
      description: Get the history of searches
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResultList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Search in collection
      description: Search in a collection with different search types
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/searches/{search_id}:
    delete:
      summary: Delete a search
      description: Delete a search
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
        - name: search_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /settings:
    get:
      summary: Get all settings
      description: Retrieve all application settings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of all settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update settings
      description: Update one or more application settings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
      responses:
        '204':
          description: Settings updated successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /settings/test_mineru_token:
    post:
      summary: Test MinerU API Token
      description: Test the connectivity of the MinerU API Token
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Token test result
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                  data:
                    type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/graphs/labels:
    get:
      summary: Get knowledge graph labels
      description: Get all available node labels in the collection's knowledge graph
      tags:
        - graph
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
          description: Collection ID
      responses:
        '200':
          description: Available graph labels retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/graphLabelsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/graphs:
    get:
      summary: Get knowledge graph
      description: |
        Retrieve knowledge graph data. Two modes are supported:
        1. Overview mode (default): Uses the entire graph ("*") and intelligently selects the most important nodes
        2. Subgraph mode: When 'label' is provided, returns a subgraph centered on that node

        Node selection prioritization:
        1. For overview: nodes with highest degree (most connections), automatically removing isolated nodes
        2. For subgraph: nodes within specified hops from the starting node

        The overview mode is optimized for visualization performance by prioritizing well-connected nodes.
      tags:
        - graph
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
          description: Collection ID
        - name: label
          in: query
          required: false
          schema:
            type: string
            default: '*'
          description: |
            Label of the starting node for subgraph exploration.
            Use "*" (default) for overview mode showing the most important nodes in the entire graph.
            Provide a specific entity name for subgraph mode.
          example: 墨香居
        - name: max_nodes
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 10000
            default: 1000
          description: Maximum number of nodes to return
          example: 1000
        - name: max_depth
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 3
          description: |
            Maximum depth when in subgraph mode (when specific label is provided).
            Ignored in overview mode (when label is "*").
          example: 3
      responses:
        '200':
          description: Knowledge graph retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledgeGraph'
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found or label not found in graph
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/graphs/nodes/merge:
    post:
      summary: Merge graph nodes
      description: |
        Merge multiple graph nodes into one, combining their descriptions, relationships, and vector data.

        Provide `entity_ids` array with 1+ entities and optional `target_entity_data` for customization.

        The operation:
        1. Auto-selects target entity (highest degree) if not specified in `target_entity_data`
        2. Combines descriptions using default merge strategy (concatenate)
        3. Merges metadata using default behavior: entity_type from target, others concatenated/joined
        4. Updates all relationships to point to the target node
        5. Updates vector storage data
        6. Removes the source nodes

        Entity type handling: Uses target entity's type if it exists, otherwise uses merged result.
        The operation is idempotent - if source nodes don't exist, it returns success.
      tags:
        - graph
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
          description: Collection ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeMergeRequest'
      responses:
        '200':
          description: Node merge completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeMergeResponse'
        '400':
          description: Bad request - invalid parameters or entity IDs are the same
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/graphs/merge-suggestions:
    post:
      summary: Generate node merge suggestions
      description: |
        Analyze knowledge graph to identify potentially mergeable nodes using LLM for semantic similarity.
        Returns confidence-ranked merge suggestions for user review and decision.

        This is a stateless endpoint that analyzes the current graph and returns suggestions
        without persisting any state. Users can then use the suggestions with the existing
        merge_nodes endpoint to perform actual merges.

        The algorithm prioritizes high-degree nodes and uses LLM to judge semantic similarity
        based on entity names, types, and descriptions.
      tags:
        - graph
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
          description: Collection ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mergeSuggestionsRequest'
            examples:
              default:
                summary: Default request
                description: Generate up to 10 suggestions for all entity types
                value:
                  max_suggestions: 10
              specific_types:
                summary: Specific entity types
                description: Only analyze PERSON and ORGANIZATION entities
                value:
                  max_suggestions: 20
                  entity_types:
                    - PERSON
                    - ORGANIZATION
              minimal:
                summary: Minimal request
                description: Empty request body uses default values
                value: {}
      responses:
        '200':
          description: Merge suggestions generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mergeSuggestionsResponse'
              examples:
                with_suggestions:
                  summary: Response with suggestions
                  description: Successful analysis with merge suggestions
                  value:
                    suggestions:
                      - entities:
                          - entity_id: 墨香居
                            entity_name: 墨香居
                            entity_type: ORGANIZATION
                            description: 这条老巷子里唯一的旧书店
                            degree: 8
                          - entity_id: 旧书店
                            entity_name: 旧书店
                            entity_type: ORGANIZATION
                            description: 经营各种书籍的小店
                            degree: 5
                        confidence_score: 0.85
                        merge_reason: 两个实体都描述同一个书店，'墨香居'是具体名称，'旧书店'是通用描述，应该合并为同一实体
                        suggested_target_entity:
                          entity_name: 墨香居
                          entity_type: ORGANIZATION
                          description: 墨香居是这条老巷子里唯一的旧书店，经营各种书籍
                    total_analyzed_nodes: 156
                    processing_time_seconds: 12.5
                no_suggestions:
                  summary: No suggestions found
                  description: Analysis completed but no merge candidates found
                  value:
                    suggestions: []
                    total_analyzed_nodes: 45
                    processing_time_seconds: 3.2
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found or knowledge graph not enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/graphs/merge-suggestions/{suggestion_id}/action:
    post:
      summary: Accept or reject a merge suggestion
      description: |
        Take action on a specific merge suggestion.

        Actions:
        - accept: Accept the suggestion and perform the merge operation
        - reject: Reject the suggestion and mark it as rejected

        When accepting, the system will:
        1. Update suggestion status to ACCEPTED
        2. Perform the actual node merge using suggested entity IDs
        3. Mark related suggestions involving the same entities as EXPIRED

        When rejecting, the system will:
        1. Update suggestion status to REJECTED
        2. No merge operation is performed

        The target entity data can be optionally overridden when accepting a suggestion.
      tags:
        - graph
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
          description: Collection ID
        - name: suggestion_id
          in: path
          required: true
          schema:
            type: string
          description: Suggestion ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/suggestionActionRequest'
            examples:
              accept:
                summary: Accept suggestion
                description: Accept the suggestion and perform merge
                value:
                  action: accept
              reject:
                summary: Reject suggestion
                description: Reject the suggestion without merging
                value:
                  action: reject
              accept_with_override:
                summary: Accept with custom target data
                description: Accept suggestion but override target entity data
                value:
                  action: accept
                  target_entity_data:
                    entity_name: Custom Name
                    description: Custom description for merged entity
      responses:
        '200':
          description: Action completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/suggestionActionResponse'
              examples:
                accept_success:
                  summary: Accept action successful
                  description: Suggestion accepted and merge completed
                  value:
                    status: success
                    message: Suggestion msug123 has been accepted and merge completed
                    suggestion_id: msug123
                    action: accept
                    merge_result:
                      status: success
                      message: Successfully merged 2 entities into 墨香居
                      entity_ids:
                        - 墨香居
                        - 书店
                      target_entity_data:
                        entity_name: 墨香居
                        entity_type: ORGANIZATION
                        description: 墨香居是这条老巷子里唯一的旧书店，经营着各种书籍
                      source_entities:
                        - 书店
                      redirected_edges: 5
                      merged_description_length: 45
                reject_success:
                  summary: Reject action successful
                  description: Suggestion rejected successfully
                  value:
                    status: success
                    message: Suggestion msug123 has been rejected
                    suggestion_id: msug123
                    action: reject
                    merge_result: null
        '400':
          description: Bad request - invalid action or suggestion already processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection or suggestion not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/graphs/export/kg-eval:
    get:
      summary: Export collection knowledge graph for KG-Eval framework
      description: |
        Export the collection's knowledge graph data in KG-Eval framework format for evaluation.

        This endpoint extracts entities, relationships, and optionally source texts from the 
        collection's knowledge graph and formats them according to the KG-Eval evaluation 
        framework structure.

        The export includes:
        - Entities with their names, types, and descriptions
        - Relationships between entities with descriptions, keywords, and weights  
        - Source texts that link back to the entities and relationships (optional)
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
          description: Collection ID to export
        - name: sample_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000000
            default: 100000
          description: Number of entities to sample for export (default 100000)
        - name: include_source_texts
          in: query
          schema:
            type: boolean
            default: true
          description: Whether to include source texts in the export (default true)
      responses:
        '200':
          description: KG-Eval export data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                description: KG-Eval framework format export data
                properties:
                  entities:
                    type: array
                    description: List of entities in KG-Eval format
                    items:
                      type: object
                  relationships:
                    type: array
                    description: List of relationships in KG-Eval format
                    items:
                      type: object
                  source_texts:
                    type: array
                    description: List of source texts with linked entities/edges (optional)
                    items:
                      type: object
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /collections/{collection_id}/sharing:
    get:
      summary: Get collection sharing status
      description: Get the sharing status of a collection (owner only)
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
          description: Collection ID
      responses:
        '200':
          description: Collection sharing status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingStatusResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '403':
          description: Permission denied (not collection owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Publish collection to marketplace
      description: Publish a collection to the public marketplace (owner only)
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
          description: Collection ID
      responses:
        '204':
          description: Collection published successfully
        '400':
          description: Bad request (e.g., collection already published)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '403':
          description: Permission denied (not collection owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Unpublish collection from marketplace
      description: Remove a collection from the public marketplace (owner only)
      security:
        - BearerAuth: []
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
          description: Collection ID
      responses:
        '204':
          description: Collection unpublished successfully
        '400':
          description: Bad request (e.g., collection not published)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '403':
          description: Permission denied (not collection owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /marketplace/collections:
    get:
      summary: List all published Collections in marketplace
      description: Returns all Collections that are published to marketplace with current user's subscription status
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Page size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 12
      responses:
        '200':
          description: List of published Collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCollectionList'
        '401':
          $ref: '#/components/responses/failResponse'
        '500':
          $ref: '#/components/responses/failResponse'
  /marketplace/collections/subscriptions:
    get:
      summary: Get user's subscribed Collections
      description: Returns all Collections that current user has subscribed to
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Page size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 12
      responses:
        '200':
          description: List of subscribed Collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCollectionList'
        '401':
          $ref: '#/components/responses/failResponse'
        '500':
          $ref: '#/components/responses/failResponse'
  /marketplace/collections/{collection_id}/subscribe:
    post:
      summary: Subscribe to a Collection
      description: Subscribe to a published Collection
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
      responses:
        '200':
          description: Successfully subscribed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCollection'
        '400':
          description: Bad request (e.g., Collection not published, self-subscription)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          $ref: '#/components/responses/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '409':
          description: Already subscribed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          $ref: '#/components/responses/failResponse'
    delete:
      summary: Unsubscribe from a Collection
      description: Remove subscription to a Collection
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
      responses:
        '200':
          description: Successfully unsubscribed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully unsubscribed
        '401':
          $ref: '#/components/responses/failResponse'
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          $ref: '#/components/responses/failResponse'
  /marketplace/collections/{collection_id}:
    get:
      summary: Get MarketplaceCollection details (read-only)
      description: Get details of a subscribed Collection (read-only access)
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
      responses:
        '200':
          description: MarketplaceCollection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCollection'
        '401':
          $ref: '#/components/responses/failResponse'
        '403':
          description: Access denied (need subscription)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          $ref: '#/components/responses/failResponse'
  /marketplace/collections/{collection_id}/documents:
    get:
      summary: List documents in MarketplaceCollection (read-only)
      description: Get document list for a subscribed Collection (read-only mode) with pagination, sorting and search capabilities
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (1-based)
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - name
              - created
              - updated
              - size
              - status
          description: Field to sort by
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Sort order
        - name: search
          in: query
          schema:
            type: string
          description: Search documents by name
      responses:
        '200':
          description: Document list (read-only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentList'
        '401':
          $ref: '#/components/responses/failResponse'
        '403':
          description: Access denied (need subscription)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          $ref: '#/components/responses/failResponse'
  /marketplace/collections/{collection_id}/documents/{document_id}/preview:
    get:
      summary: Preview document in MarketplaceCollection (read-only)
      description: Get document preview for a subscribed Collection (read-only mode)
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          description: Document ID
          schema:
            type: string
      responses:
        '200':
          description: Document preview (read-only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentPreview'
        '401':
          $ref: '#/components/responses/failResponse'
        '403':
          description: Access denied (need subscription)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          $ref: '#/components/responses/failResponse'
  /marketplace/collections/{collection_id}/documents/{document_id}/object:
    get:
      summary: Get document object from MarketplaceCollection (read-only)
      description: Get an object from a specific document in a subscribed Collection (read-only mode)
      operationId: get_marketplace_document_object
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
        - name: document_id
          in: path
          required: true
          description: Document ID
          schema:
            type: string
        - name: path
          in: query
          required: true
          description: Object path within the document
          schema:
            type: string
      responses:
        '200':
          description: Document object (read-only)
          content:
            application/octet-stream: {}
        '206':
          description: Partial content (for range requests)
          content:
            application/octet-stream: {}
        '401':
          $ref: '#/components/responses/failResponse'
        '403':
          description: Access denied (need subscription)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '416':
          description: Range not satisfiable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          $ref: '#/components/responses/failResponse'
  /marketplace/collections/{collection_id}/graph:
    get:
      summary: Get knowledge graph for MarketplaceCollection (read-only)
      description: Get knowledge graph data for a subscribed Collection (read-only mode)
      parameters:
        - name: collection_id
          in: path
          required: true
          description: Collection ID
          schema:
            type: string
        - name: label
          in: query
          description: Node label filter
          schema:
            type: string
            default: '*'
        - name: max_nodes
          in: query
          description: Maximum number of nodes
          schema:
            type: integer
            minimum: 1
            maximum: 10000
            default: 1000
        - name: max_depth
          in: query
          description: Graph traversal depth
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 3
      responses:
        '200':
          description: Knowledge graph data (read-only)
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      type: object
                  edges:
                    type: array
                    items:
                      type: object
                  collection_id:
                    type: string
                  read_only:
                    type: boolean
        '401':
          $ref: '#/components/responses/failResponse'
        '403':
          description: Access denied (need subscription)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          $ref: '#/components/responses/failResponse'
  /apikeys:
    get:
      summary: Get API keys
      description: Get API keys
      responses:
        '200':
          description: API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiKeyList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create API key
      description: Create API key
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiKeyCreate'
      responses:
        '200':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiKey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /apikeys/{apikey_id}:
    put:
      summary: Update API key
      description: Update API key
      security:
        - BearerAuth: []
      parameters:
        - name: apikey_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiKeyUpdate'
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiKey'
        '401':
          description: Unauthorized
    delete:
      summary: Delete API key
      description: Delete API key
      security:
        - BearerAuth: []
      parameters:
        - name: apikey_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: API key deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: API key not found
  /available_models:
    post:
      summary: Get available models with filtering
      description: |
        Get available models with tag filtering support.
        - No tag_filters or empty array: Returns only models with "recommend" tag (default)
        - Specific filters: Returns models matching the filter conditions
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tagFilterRequest'
            examples:
              default:
                summary: Default (recommend only)
                description: Empty request body returns only models with "recommend" tag
                value: {}
              all_models:
                summary: Get all models
                description: Empty tag_filters array returns all models
                value:
                  tag_filters: []
              simple_filter:
                summary: Simple tag filter
                description: Models with recommend tag
                value:
                  tag_filters:
                    - operation: OR
                      tags:
                        - recommend
              and_filter:
                summary: AND filter
                description: Models with both free and recommend tags
                value:
                  tag_filters:
                    - operation: AND
                      tags:
                        - free
                        - recommend
              or_filter:
                summary: OR filter
                description: Models with either openai or gpt tags
                value:
                  tag_filters:
                    - operation: OR
                      tags:
                        - openai
                        - gpt
              combined_filter:
                summary: Combined filter
                description: Complex logic - (free AND recommend) OR (openai)
                value:
                  tag_filters:
                    - operation: AND
                      tags:
                        - free
                        - recommend
                    - operation: OR
                      tags:
                        - openai
      responses:
        '200':
          description: Available models matching filter criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modelConfigList'
        '400':
          description: Invalid tag filter format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /default_models:
    get:
      summary: Get default model configurations
      description: Get current default model settings for different scenarios
      responses:
        '200':
          description: Default models configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultModelsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update default model configurations
      description: Update default model settings for different scenarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/defaultModelsUpdateRequest'
      responses:
        '200':
          description: Successfully updated default models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultModelsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_configuration:
    get:
      summary: Get complete LLM configuration
      description: Get complete LLM configuration including providers and models
      responses:
        '200':
          description: Complete LLM configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmConfigurationResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_providers:
    post:
      summary: Create a new LLM provider
      description: Create a new LLM provider with optional API key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/llmProviderCreateWithApiKey'
      responses:
        '200':
          description: LLM provider created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProvider'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_providers/{provider_name}:
    get:
      summary: Get a specific LLM provider
      description: Get a specific LLM provider by name
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
      responses:
        '200':
          description: LLM provider details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProvider'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update an LLM provider
      description: Update an existing LLM provider with optional API key
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/llmProviderUpdateWithApiKey'
      responses:
        '200':
          description: LLM provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProvider'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete an LLM provider
      description: Delete an LLM provider (soft delete)
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
      responses:
        '200':
          description: LLM provider deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_providers/{provider_name}/models:
    get:
      summary: Get models for a specific provider
      description: Get all models for a specific provider
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
      responses:
        '200':
          description: List of provider models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProviderModelList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    post:
      summary: Create a new model for a provider
      description: Create a new model for a specific provider
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/llmProviderModelCreate'
      responses:
        '200':
          description: Model created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProviderModel'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_providers/{provider_name}/models/{api}/{model}:
    put:
      summary: Update a provider model
      description: Update a specific model of a provider
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
        - name: api
          in: path
          required: true
          schema:
            type: string
            enum:
              - completion
              - embedding
              - rerank
          description: API type
        - name: model
          in: path
          required: true
          schema:
            type: string
          description: Model name (supports names with slashes, will be URL decoded)
          style: simple
          explode: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/llmProviderModelUpdate'
      responses:
        '200':
          description: Model updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProviderModel'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Model not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    delete:
      summary: Delete a provider model
      description: Delete a specific model of a provider
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          description: Provider name
        - name: api
          in: path
          required: true
          schema:
            type: string
            enum:
              - completion
              - embedding
              - rerank
          description: API type
        - name: model
          in: path
          required: true
          schema:
            type: string
          description: Model name (supports names with slashes, will be URL decoded)
          style: simple
          explode: false
      responses:
        '200':
          description: Model deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: Model not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /llm_provider_models:
    get:
      summary: List all LLM provider models
      description: List all LLM provider models, optionally filtered by provider
      parameters:
        - name: provider_name
          in: query
          required: false
          schema:
            type: string
          description: Optional filter by provider name
      responses:
        '200':
          description: List of LLM provider models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmProviderModelList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /embeddings:
    post:
      summary: Create embeddings
      description: |
        Generate embeddings for the given input text(s) using the specified provider and model.
        This endpoint is compatible with OpenAI's embeddings API format, but includes an additional
        'provider' parameter to specify which LLM provider to use.

        The endpoint supports both single text inputs and batch processing of multiple texts.
        It requires the provider to be configured in the user's Model Service Provider (MSP) settings
        with a valid API key.
      tags:
        - LLM
      security:
        - BearerAuth: []
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/embeddingRequest'
            examples:
              single_text:
                summary: Single text embedding
                description: Generate embedding for a single text input
                value:
                  provider: openai
                  model: text-embedding-3-small
                  input: The food was delicious and the waiter was very attentive.
              multiple_texts:
                summary: Batch text embeddings
                description: Generate embeddings for multiple text inputs
                value:
                  provider: openai
                  model: text-embedding-3-small
                  input:
                    - The food was delicious and the waiter was very attentive.
                    - I had a wonderful experience at this restaurant.
                    - The service was excellent and the ambiance was perfect.
              different_provider:
                summary: Using different provider
                description: Generate embeddings using a different provider
                value:
                  provider: anthropic
                  model: text-embedding-ada-002
                  input: This is a sample text for embedding generation.
      responses:
        '200':
          description: Successfully generated embeddings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/embeddingResponse'
              examples:
                single_result:
                  summary: Single embedding result
                  description: Response for single text input
                  value:
                    object: list
                    data:
                      - object: embedding
                        embedding:
                          - 0.0023064255
                          - -0.009327292
                          - 0.015797421
                          - -0.007654321
                        index: 0
                    model: text-embedding-3-small
                    usage:
                      prompt_tokens: 16
                      total_tokens: 16
                multiple_results:
                  summary: Multiple embedding results
                  description: Response for multiple text inputs
                  value:
                    object: list
                    data:
                      - object: embedding
                        embedding:
                          - 0.0023064255
                          - -0.009327292
                          - 0.015797421
                          - -0.007654321
                        index: 0
                      - object: embedding
                        embedding:
                          - 0.0012345678
                          - -0.0087654321
                          - 0.0199887766
                          - -0.003456789
                        index: 1
                    model: text-embedding-3-small
                    usage:
                      prompt_tokens: 32
                      total_tokens: 32
        '400':
          description: Bad request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                empty_input:
                  summary: Empty input
                  description: Input cannot be empty
                  value:
                    success: false
                    message: Input cannot be empty
                invalid_provider:
                  summary: Provider not found
                  description: Specified provider is not configured for the user
                  value:
                    success: false
                    message: Provider 'invalid_provider' not found for user
                model_not_found:
                  summary: Model not found
                  description: Specified model not found for the provider
                  value:
                    success: false
                    message: Model 'invalid_model' not found for provider 'openai'
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              example:
                success: false
                message: Authentication required
        '500':
          description: Internal server error - Embedding generation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                embedding_error:
                  summary: Embedding generation failed
                  description: Error during embedding generation process
                  value:
                    success: false
                    message: 'Embedding generation failed: API rate limit exceeded'
                configuration_error:
                  summary: Configuration error
                  description: Provider configuration issue
                  value:
                    success: false
                    message: API key not configured for provider 'openai'
  /rerank:
    post:
      summary: Rerank documents
      description: |
        Rerank a list of documents based on their relevance to a given query using the specified 
        provider and model. This endpoint follows the industry-standard rerank API format used by
        providers like Cohere, Jina AI, and others.

        The endpoint supports both simple text lists and structured document objects with metadata.
        Documents are returned ordered by relevance score (highest first), with optional top_k 
        filtering to limit the number of results.

        The provider must be configured in the user's Model Service Provider (MSP) settings
        with a valid API key and support rerank functionality.
      tags:
        - LLM
      security:
        - BearerAuth: []
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rerankRequest'
            examples:
              simple_text_list:
                summary: Simple text documents
                description: Rerank a list of text documents
                value:
                  provider: cohere
                  model: rerank-english-v3.0
                  query: What is the capital of France?
                  documents:
                    - Paris is the capital of France.
                    - London is the capital of England.
                    - Berlin is the capital of Germany.
                    - Madrid is the capital of Spain.
                  top_k: 3
                  return_documents: true
              structured_documents:
                summary: Documents with metadata
                description: Rerank documents with additional metadata
                value:
                  provider: jina_ai
                  model: jina-reranker-v1-base-en
                  query: artificial intelligence machine learning
                  documents:
                    - text: Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience.
                      metadata:
                        id: doc_1
                        source: encyclopedia
                        category: technology
                    - text: Natural language processing is a branch of AI that helps computers understand human language.
                      metadata:
                        id: doc_2
                        source: research_paper
                        category: nlp
                    - text: The weather today is sunny with a temperature of 25 degrees Celsius.
                      metadata:
                        id: doc_3
                        source: weather_report
                        category: weather
                  top_k: 2
                  return_documents: true
              different_provider:
                summary: Using different provider
                description: Rerank using a different provider and model
                value:
                  provider: huggingface
                  model: BAAI/bge-reranker-base
                  query: renewable energy sources
                  documents:
                    - Solar energy is a clean and renewable source of power.
                    - Coal is a non-renewable fossil fuel.
                    - Wind energy harnesses the power of wind to generate electricity.
                    - Nuclear energy provides a large amount of power from uranium.
                  top_k: 5
                  return_documents: false
      responses:
        '200':
          description: Successfully reranked documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rerankResponse'
              examples:
                simple_rerank_result:
                  summary: Simple rerank result
                  description: Response for simple text documents with full content
                  value:
                    object: list
                    data:
                      - index: 0
                        relevance_score: 0.95
                        document:
                          text: Paris is the capital of France.
                      - index: 3
                        relevance_score: 0.12
                        document:
                          text: Madrid is the capital of Spain.
                      - index: 1
                        relevance_score: 0.08
                        document:
                          text: London is the capital of England.
                    model: rerank-english-v3.0
                    usage:
                      total_tokens: 156
                structured_rerank_result:
                  summary: Structured documents result
                  description: Response for documents with metadata
                  value:
                    object: list
                    data:
                      - index: 0
                        relevance_score: 0.92
                        document:
                          text: Machine learning is a subset of artificial intelligence that enables computers to learn and improve from experience.
                          metadata:
                            id: doc_1
                            source: encyclopedia
                            category: technology
                      - index: 1
                        relevance_score: 0.87
                        document:
                          text: Natural language processing is a branch of AI that helps computers understand human language.
                          metadata:
                            id: doc_2
                            source: research_paper
                            category: nlp
                    model: jina-reranker-v1-base-en
                    usage:
                      total_tokens: 284
                score_only_result:
                  summary: Scores without documents
                  description: Response when return_documents=false
                  value:
                    object: list
                    data:
                      - index: 0
                        relevance_score: 0.89
                      - index: 2
                        relevance_score: 0.76
                      - index: 3
                        relevance_score: 0.23
                    model: BAAI/bge-reranker-base
                    usage:
                      total_tokens: 198
        '400':
          description: Bad request - Invalid input parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                empty_query:
                  summary: Empty query
                  description: Query cannot be empty
                  value:
                    success: false
                    message: Query cannot be empty
                empty_documents:
                  summary: Empty documents
                  description: Documents list cannot be empty
                  value:
                    success: false
                    message: Documents list cannot be empty
                invalid_provider:
                  summary: Provider not found
                  description: Specified provider is not configured for the user
                  value:
                    success: false
                    message: Provider 'invalid_provider' not found for user
                model_not_found:
                  summary: Model not found
                  description: Specified model not found for the provider
                  value:
                    success: false
                    message: Model 'invalid_model' not found for provider 'cohere'
                too_many_documents:
                  summary: Too many documents
                  description: Document count exceeds provider limits
                  value:
                    success: false
                    message: 'Too many documents: 1500 exceeds maximum 1000 for model ''rerank-english-v3.0'''
                invalid_top_k:
                  summary: Invalid top_k value
                  description: top_k must be positive and not exceed document count
                  value:
                    success: false
                    message: top_k value 15 exceeds document count 10
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              example:
                success: false
                message: Authentication required
        '500':
          description: Internal server error - Rerank operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                rerank_error:
                  summary: Rerank operation failed
                  description: Error during rerank process
                  value:
                    success: false
                    message: 'Rerank operation failed: API rate limit exceeded'
                configuration_error:
                  summary: Configuration error
                  description: Provider configuration issue
                  value:
                    success: false
                    message: API key not configured for provider 'cohere'
  /config:
    get:
      summary: Get system configuration
      description: Get system configuration
      security:
        - BearerAuth: []
      responses:
        '200':
          description: System configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/config'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /prompt-templates:
    get:
      summary: Get prompt templates
      description: Get prompt templates
      responses:
        '200':
          description: A list of prompt templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/promptTemplateList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /audit-logs:
    get:
      tags:
        - audit
      summary: List audit logs
      description: List audit logs with pagination, sorting and filtering options
      operationId: list_audit_logs
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (1-based)
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - created
              - duration
              - status_code
              - api_name
          description: Field to sort by
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Sort order
        - name: search
          in: query
          schema:
            type: string
          description: Search in API name or path
        - name: user_id
          in: query
          required: false
          schema:
            type: string
          description: Filter by user ID
        - name: resource_type
          in: query
          required: false
          schema:
            type: string
            enum:
              - collection
              - document
              - bot
              - chat
              - message
              - api_key
              - llm
              - llm_provider
              - llm_provider_model
              - model_service_provider
              - user
              - flow
              - search
              - index
          description: Filter by resource type
        - name: api_name
          in: query
          required: false
          schema:
            type: string
          description: Filter by API name
        - name: http_method
          in: query
          required: false
          schema:
            type: string
            enum:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
          description: Filter by HTTP method
        - name: status_code
          in: query
          required: false
          schema:
            type: integer
          description: Filter by HTTP status code
        - name: start_date
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter by start date
        - name: end_date
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter by end date
      responses:
        '200':
          description: Audit logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auditLogList'
        '403':
          description: Admin access required
  /audit-logs/{audit_id}:
    get:
      tags:
        - audit
      summary: Get audit log detail
      description: Get a specific audit log by ID
      operationId: get_audit_log
      parameters:
        - name: audit_id
          in: path
          required: true
          schema:
            type: string
          description: Audit log ID
      responses:
        '200':
          description: Audit log retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auditLog'
        '403':
          description: Admin access required
        '404':
          description: Audit log not found
  /invite:
    post:
      summary: Create an invitation
      description: Create a new invitation for a user to register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invitationCreate'
      responses:
        '200':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invitation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /invitations:
    get:
      summary: Get all invitations
      description: Get all invitations
      responses:
        '200':
          description: Invitations fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invitationList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /register:
    post:
      summary: Register a new user
      description: Register a new user with an invitation token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /login:
    post:
      summary: Login a user
      description: Login a user with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /logout:
    post:
      summary: Logout a user
      description: Logout a user
      responses:
        '200':
          description: Logout successful
  /users:
    get:
      summary: Get all users
      description: Get all users
      responses:
        '200':
          description: Users fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /user:
    get:
      summary: Get user info
      description: Get user info
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /change-password:
    post:
      summary: Change user password
      description: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changePassword'
      responses:
        '200':
          description: Password changed successfully
  /users/{user_id}:
    delete:
      summary: Delete a user
      description: Delete a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
  /quotas:
    get:
      summary: Get user quotas
      description: Get quota information for the current user or specific user (admin only)
      tags:
        - quotas
      parameters:
        - name: user_id
          in: query
          description: User ID to get quotas for (admin only, defaults to current user)
          required: false
          schema:
            type: string
            example: user123
        - name: search
          in: query
          description: Search term for username, email, or user ID (admin only)
          required: false
          schema:
            type: string
            example: john
      responses:
        '200':
          description: Quota information retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/userQuotaInfo'
                  - $ref: '#/components/schemas/userQuotaList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '403':
          description: Forbidden - Admin access required for other users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /quotas/{user_id}:
    put:
      summary: Update user quota
      description: Update quota limit for a specific user (admin only)
      tags:
        - quotas
      parameters:
        - name: user_id
          in: path
          description: User ID to update quota for
          required: true
          schema:
            type: string
            example: user123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quotaUpdateRequest'
      responses:
        '200':
          description: Quota updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/quotaUpdateResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /quotas/{user_id}/recalculate:
    post:
      summary: Recalculate user quota usage
      description: Recalculate and update current usage for all quota types for a user (admin only)
      tags:
        - quotas
      parameters:
        - name: user_id
          in: path
          description: User ID to recalculate quotas for
          required: true
          schema:
            type: string
            example: user123
      responses:
        '200':
          description: Quota usage recalculated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Quota usage recalculated successfully
                  updated_usage:
                    type: object
                    additionalProperties:
                      type: integer
                    example:
                      max_collection_count: 3
                      max_document_count: 25
                      max_bot_count: 2
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /system/default-quotas:
    get:
      summary: Get system default quotas
      description: Get system default quota configuration (admin only)
      tags:
        - quotas
      responses:
        '200':
          description: System default quotas retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemDefaultQuotasResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
    put:
      summary: Update system default quotas
      description: Update system default quota configuration (admin only)
      tags:
        - quotas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/systemDefaultQuotasUpdateRequest'
      responses:
        '200':
          description: System default quotas updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemDefaultQuotasUpdateResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
  /web/search:
    post:
      summary: Web search
      description: Perform web search using various search engines
      tags:
        - web
      security:
        - BearerAuth: []
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webSearchRequest'
            examples:
              simple_search:
                summary: Simple search
                description: Basic web search
                value:
                  query: ApeRAG 2025年最新发展
                  max_results: 5
              advanced_search:
                summary: Advanced search
                description: Search with custom parameters
                value:
                  query: 机器学习最新进展
                  max_results: 10
                  timeout: 30
                  locale: zh-CN
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webSearchResponse'
              examples:
                search_results:
                  summary: Search results
                  description: Successful search with results
                  value:
                    query: ApeRAG 2025年最新发展
                    results:
                      - rank: 1
                        title: ApeRAG 2025年技术路线图
                        url: https://example.com/aperag-2025-roadmap
                        snippet: ApeRAG在2025年将重点发展...
                        domain: example.com
                        timestamp: '2025-01-01T00:00:00Z'
                    total_results: 1
                    search_time: 1.2
        '400':
          description: Bad request - Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                empty_query:
                  summary: Empty query
                  description: Query cannot be empty
                  value:
                    code: '400'
                    message: Search query cannot be empty
                invalid_engine:
                  summary: Invalid search engine
                  description: Unsupported search engine
                  value:
                    code: '400'
                    message: 'Unsupported search engine: invalid_engine'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          description: Internal server error - Search failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                search_error:
                  summary: Search failed
                  description: Search operation failed
                  value:
                    code: '500'
                    message: 'Search failed: Network timeout'
  /web/read:
    post:
      summary: Web content reading
      description: Read and extract content from web pages
      tags:
        - web
      security:
        - BearerAuth: []
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webReadRequest'
            examples:
              single_url:
                summary: Single URL
                description: Read content from a single URL
                value:
                  urls: https://example.com/article
                  timeout: 30
              multiple_urls:
                summary: Multiple URLs
                description: Read content from multiple URLs
                value:
                  urls:
                    - https://example.com/article1
                    - https://example.com/article2
                  max_concurrent: 2
              advanced_reading:
                summary: Advanced content extraction
                description: Content extraction with CSS selectors
                value:
                  urls: https://example.com/spa-page
                  css_selector: article .content
                  wait_for_selector: .loading-complete
                  exclude_selector: .ads, .sidebar
                  timeout: 45
                  locale: zh-CN
      responses:
        '200':
          description: Content reading completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webReadResponse'
              examples:
                single_success:
                  summary: Single URL success
                  description: Successfully read single URL
                  value:
                    results:
                      - url: https://example.com/article
                        status: success
                        title: 示例文章标题
                        content: |-
                          # 示例文章

                          这是文章内容...
                        extracted_at: '2025-01-07T10:00:00Z'
                        word_count: 500
                        token_count: 750
                    total_urls: 1
                    successful: 1
                    failed: 0
                    processing_time: 2.5
                mixed_results:
                  summary: Mixed results
                  description: Some URLs succeeded, some failed
                  value:
                    results:
                      - url: https://example.com/article1
                        status: success
                        title: 成功的文章
                        content: |-
                          # 成功读取

                          内容...
                        extracted_at: '2025-01-07T10:00:00Z'
                        word_count: 300
                        token_count: 450
                      - url: https://invalid-url.com/404
                        status: error
                        error: 页面无法访问
                        error_code: TIMEOUT
                    total_urls: 2
                    successful: 1
                    failed: 1
                    processing_time: 5.2
        '400':
          description: Bad request - Invalid read parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                empty_urls:
                  summary: Empty URLs
                  description: URLs list cannot be empty
                  value:
                    code: '400'
                    message: URLs list cannot be empty
                invalid_url:
                  summary: Invalid URL format
                  description: URL format is invalid
                  value:
                    code: '400'
                    message: Invalid URL format
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
        '500':
          description: Internal server error - Reading failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failResponse'
              examples:
                read_error:
                  summary: Reading failed
                  description: Content reading operation failed
                  value:
                    code: '500'
                    message: 'Content reading failed: Provider error'
  /question-sets:
    get:
      tags:
        - evaluation
      summary: List all question sets for the current user
      security:
        - BearerAuth: []
      operationId: list_question_sets_api_v1_question_sets_get
      parameters:
        - name: collection_id
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionSetList'
    post:
      tags:
        - evaluation
      summary: Create a new question set
      security:
        - BearerAuth: []
      operationId: create_question_set_api_v1_question_sets_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionSetCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionSet'
  /question-sets/generate:
    post:
      tags:
        - evaluation
      summary: Generate a question set from a collection
      security:
        - BearerAuth: []
      operationId: generate_question_set_api_v1_question_sets_generate_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionSetGenerate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionSetDetail'
  /question-sets/{qs_id}:
    get:
      tags:
        - evaluation
      summary: Get details of a question set
      security:
        - BearerAuth: []
      operationId: get_question_set_api_v1_question_sets__qs_id__get
      parameters:
        - name: qs_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionSetDetail'
    put:
      tags:
        - evaluation
      summary: Update a question set
      security:
        - BearerAuth: []
      operationId: update_question_set_api_v1_question_sets__qs_id__put
      parameters:
        - name: qs_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionSetUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionSet'
    delete:
      tags:
        - evaluation
      summary: Delete a question set
      security:
        - BearerAuth: []
      operationId: delete_question_set_api_v1_question_sets__qs_id__delete
      parameters:
        - name: qs_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful Response
  /question-sets/{qs_id}/questions:
    post:
      tags:
        - evaluation
      summary: Add questions to a question set
      security:
        - BearerAuth: []
      operationId: add_questions_api_v1_question_sets__qs_id__questions_post
      parameters:
        - name: qs_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionsAdd'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
  /question-sets/{qs_id}/questions/{q_id}:
    put:
      tags:
        - evaluation
      summary: Update a question
      security:
        - BearerAuth: []
      operationId: update_question_api_v1_question_sets__qs_id__questions__q_id__put
      parameters:
        - name: qs_id
          in: path
          required: true
          schema:
            type: string
        - name: q_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
    delete:
      tags:
        - evaluation
      summary: Delete a question
      security:
        - BearerAuth: []
      operationId: delete_question_api_v1_question_sets__qs_id__questions__q_id__delete
      parameters:
        - name: qs_id
          in: path
          required: true
          schema:
            type: string
        - name: q_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful Response
  /evaluations:
    get:
      tags:
        - evaluation
      summary: List all evaluation tasks
      security:
        - BearerAuth: []
      operationId: list_evaluations_api_v1_evaluations_get
      parameters:
        - name: collection_id
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationList'
    post:
      tags:
        - evaluation
      summary: Create and start a new evaluation task
      security:
        - BearerAuth: []
      operationId: create_evaluation_api_v1_evaluations_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
  /evaluations/{eval_id}:
    get:
      tags:
        - evaluation
      summary: Get details of an evaluation task
      security:
        - BearerAuth: []
      operationId: get_evaluation_api_v1_evaluations__eval_id__get
      parameters:
        - name: eval_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationDetail'
    delete:
      tags:
        - evaluation
      summary: Delete an evaluation task
      security:
        - BearerAuth: []
      operationId: delete_evaluation_api_v1_evaluations__eval_id__delete
      parameters:
        - name: eval_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful Response
  /evaluations/{eval_id}/pause:
    post:
      tags:
        - evaluation
      summary: Pause an evaluation task
      security:
        - BearerAuth: []
      operationId: pause_evaluation_api_v1_evaluations__eval_id__pause_post
      parameters:
        - name: eval_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
  /evaluations/{eval_id}/resume:
    post:
      tags:
        - evaluation
      summary: Resume an evaluation task
      security:
        - BearerAuth: []
      operationId: resume_evaluation_api_v1_evaluations__eval_id__resume_post
      parameters:
        - name: eval_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
  /evaluations/{eval_id}/retry:
    post:
      tags:
        - evaluation
      summary: Retry failed items in an evaluation task
      security:
        - BearerAuth: []
      operationId: retry_evaluation_api_v1_evaluations__eval_id__retry_post
      parameters:
        - name: eval_id
          in: path
          required: true
          schema:
            type: string
        - name: scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - failed
              - all
            default: failed
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
  /evaluations/chat_with_agent:
    post:
      tags:
        - evaluation
      summary: (Internal) Chat with an agent for evaluation purposes
      description: |
        This is an internal endpoint used by the evaluation service to run the agent chat logic in the main FastAPI process, avoiding issues with Celery's execution context. It should be protected by an internal API key.
      operationId: chat_with_agent_for_evaluation_api_v1_evaluations_chat_with_agent_post
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationChatWithAgentRequest'
      responses:
        '200':
          description: Successful Response from Agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationChatWithAgentResponse'
        '401':
          description: Unauthorized
        '422':
          description: Validation Error
  /agent/message:
    post:
      summary: (Doc Only) Agent message format for WebSocket/SSE
      description: |
        This endpoint is for documentation and model generation only. Actual communication should use WebSocket or SSE.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentMessage'
      responses:
        '200':
          description: Dummy response
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
    CookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
  schemas:
    modelSpec:
      type: object
      properties:
        model:
          type: string
          description: The name of the language model to use
          example: gpt-4o-mini
        model_service_provider:
          type: string
          description: Used for querying auth information (api_key/api_base/...) for a model service provider.
          example: openai
        custom_llm_provider:
          type: string
          description: Used for Non-OpenAI LLMs (e.g. 'bedrock' for amazon.titan-tg1-large)
          example: openai
        temperature:
          type: number
          description: Controls randomness in the output. Values between 0 and 2. Lower values make output more focused and deterministic
          minimum: 0
          maximum: 2
          example: 0.1
          default: 0.1
        max_tokens:
          type: integer
          description: Maximum number of tokens to generate
          minimum: 1
          example: 4096
        max_completion_tokens:
          type: integer
          description: Upper bound for generated completion tokens, including visible and reasoning tokens
          minimum: 1
          example: 4096
        timeout:
          type: integer
          description: Maximum execution time in seconds for the API request
          minimum: 1
        top_n:
          type: integer
          description: Number of top results to return when reranking documents
          minimum: 1
        tags:
          type: array
          items:
            type: string
          description: Tags for model categorization
          example:
            - free
            - recommend
          default: []
    collectionConfig:
      type: object
      properties:
        source:
          type: string
          description: Source system identifier
          example: system
        enable_vector:
          type: boolean
          description: Whether to enable vector index
          default: true
        enable_fulltext:
          type: boolean
          description: Whether to enable fulltext index
          default: true
        enable_knowledge_graph:
          type: boolean
          description: Whether to enable knowledge graph index
          default: true
        enable_summary:
          type: boolean
          description: Whether to enable summary index
          default: false
        enable_vision:
          type: boolean
          description: Whether to enable vision index
          default: false
        embedding:
          $ref: '#/components/schemas/modelSpec'
        completion:
          $ref: '#/components/schemas/modelSpec'
        path:
          type: string
          description: Path for local and ftp sources
          deprecated: true
        host:
          type: string
          description: FTP host
          deprecated: true
        username:
          type: string
          description: FTP username
          deprecated: true
        password:
          type: string
          description: FTP password
          deprecated: true
        region:
          type: string
          description: Region for S3/OSS
          deprecated: true
        access_key_id:
          type: string
          description: Access key ID for S3/OSS
          deprecated: true
        secret_access_key:
          type: string
          description: Secret access key for S3/OSS
          deprecated: true
        bucket:
          type: string
          description: Bucket name for S3/OSS
          deprecated: true
        dir:
          type: string
          description: Directory path in bucket for S3/OSS
          deprecated: true
        email_source:
          type: object
          description: Email source configuration
          deprecated: true
        pop_server:
          type: string
          description: POP3 server address
          deprecated: true
        port:
          type: string
          description: Email server port
          deprecated: true
        email_address:
          type: string
          description: Email address
          deprecated: true
        email_password:
          type: string
          description: Email password
          deprecated: true
        app_id:
          type: string
          description: Feishu app ID
          deprecated: true
        app_secret:
          type: string
          description: Feishu app secret
          deprecated: true
        space_id:
          type: string
          description: Feishu space ID
          deprecated: true
    collectionSource:
      type: object
      properties:
        category:
          type: string
          enum:
            - upload
            - tencent
            - oss
            - local
            - s3
            - ftp
            - email
            - url
            - github
        upload:
          type: object
        local:
          type: object
          properties:
            path:
              type: string
        oss:
          type: object
          properties:
            access_key_id:
              type: string
            access_key_secret:
              type: string
            buckets:
              type: array
              items:
                type: object
                properties:
                  bucket:
                    type: string
                  dir:
                    type: string
            bucket:
              type: string
            endpoint:
              type: string
            region:
              type: string
            dir:
              type: string
        s3:
          type: object
          properties:
            access_key_id:
              type: string
            access_key_secret:
              type: string
            buckets:
              type: array
              items:
                type: object
            bucket:
              type: string
            region:
              type: string
            dir:
              type: string
        ftp:
          type: object
          properties:
            path:
              type: string
            host:
              type: string
            port:
              type: number
            username:
              type: string
        email:
          type: object
          properties:
            pop_server:
              type: string
            port:
              type: number
            email_address:
              type: string
            email_password:
              type: string
            detect_spam:
              type: boolean
        url:
          type: object
          properties:
            url:
              type: string
            name:
              type: string
        feishu:
          type: object
          properties:
            app_id:
              type: string
            app_secret:
              type: string
            space_id:
              type: string
            node_id:
              type: string
            method:
              type: string
            target_format:
              type: string
    collection:
      description: Collection is a collection of documents
      properties:
        id:
          type: string
        title:
          type: string
        type:
          type: string
        description:
          type: string
        config:
          $ref: '#/components/schemas/collectionConfig'
        source:
          $ref: '#/components/schemas/collectionSource'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - DELETED
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        is_published:
          type: boolean
          description: Whether the collection is published to marketplace
          default: false
        published_at:
          type: string
          format: date-time
          nullable: true
          description: Publication time, null when not published
    ExecutionConfig:
      type: object
      description: Configuration for workflow execution
      properties:
        timeout:
          type: integer
          description: Overall timeout in seconds
          example: 300
        retry:
          type: object
          properties:
            max_attempts:
              type: integer
              description: Maximum number of retry attempts
              example: 3
            delay:
              type: integer
              description: Delay between retries in seconds
              example: 5
        error_handling:
          type: object
          properties:
            strategy:
              type: string
              enum:
                - stop_on_error
                - continue_on_error
              description: Error handling strategy
              example: stop_on_error
            notification:
              type: object
              properties:
                email:
                  type: array
                  items:
                    type: string
                    format: email
                  example:
                    - admin@example.com
    SchemaDefinition:
      type: object
      description: JSON Schema definition
      properties:
        type:
          type: string
          enum:
            - object
            - array
            - string
            - number
            - integer
            - boolean
            - null
        properties:
          type: object
        required:
          type: array
          items:
            type: string
        additionalProperties:
          type: boolean
      additionalProperties: true
    Node:
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          type: string
          description: Unique identifier for the node
          example: vector_search_3f8e2c1a
        ariaLabel:
          type: string
          description: label for the node
        type:
          type: string
          enum:
            - start
            - vector_search
            - fulltext_search
            - graph_search
            - merge
            - rerank
            - llm
          description: Type of node
          example: vector_search
        title:
          type: string
          description: Human-readable title of the node
          example: Vector Search
        data:
          type: object
          required:
            - input
            - output
          properties:
            input:
              type: object
              required:
                - schema
              properties:
                schema:
                  $ref: '#/components/schemas/SchemaDefinition'
                values:
                  type: object
                  description: Default values and template references
                  additionalProperties: true
            output:
              type: object
              required:
                - schema
              properties:
                schema:
                  $ref: '#/components/schemas/SchemaDefinition'
            collapsed:
              type: boolean
              description: Whether the node is collapsed, only useful for frontend to collapse the node
              example: false
        position:
          type: object
          description: Position of the node in the frontend
          properties:
            x:
              type: number
            'y':
              type: number
        dragHandle:
          type: string
          description: Drag handle of the node, only useful for frontend to drag the node
        measured:
          type: object
          description: Measured position of the node, only useful for frontend to measure the node
          properties:
            width:
              type: number
            height:
              type: number
        selected:
          type: boolean
          description: Whether the node is selected, only useful for frontend to select the node
        deletable:
          type: boolean
          description: Whether the node is deletable, only useful for frontend to delete the node
          example: true
    Edge:
      type: object
      required:
        - source
        - target
      properties:
        id:
          type: string
          description: Unique identifier for the edge, only useful for frontend to identify the edge
          example: edge_1
        deletable:
          type: boolean
          description: Whether the edge is deletable, only useful for frontend to delete the edge
          example: true
        type:
          type: string
          description: Type of the edge
          example: edge
        source:
          type: string
          description: ID of the source node
          example: start
        target:
          type: string
          description: ID of the target node
          example: vector_search_3f8e2c1a
    WorkflowStyle:
      type: object
      description: Workflow style
      properties:
        edgeType:
          type: string
          enum:
            - straight
            - step
            - smoothstep
            - default
            - simplebezier
        layoutDirection:
          type: string
          enum:
            - TB
            - LR
    WorkflowDefinition:
      type: object
      required:
        - name
        - title
        - version
        - nodes
        - edges
      properties:
        name:
          type: string
          description: Machine-readable identifier for the workflow
          example: rag_flow
        title:
          type: string
          description: Human-readable title of the workflow
          example: RAG Knowledge Base Flow
        description:
          type: string
          description: Detailed description of the workflow
          example: A typical RAG flow with parallel retrieval and reranking
        version:
          type: string
          description: Version number of the workflow definition
          example: 1.0.0
        execution:
          $ref: '#/components/schemas/ExecutionConfig'
        schema:
          type: object
          description: Custom schema definitions used across the workflow
          additionalProperties:
            $ref: '#/components/schemas/SchemaDefinition'
        nodes:
          type: array
          description: List of nodes in the workflow
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          description: List of edges connecting nodes in the workflow
          items:
            $ref: '#/components/schemas/Edge'
        style:
          $ref: '#/components/schemas/WorkflowStyle'
    botConfig:
      type: object
      properties:
        agent:
          type: object
          properties:
            completion:
              $ref: '#/components/schemas/modelSpec'
            system_prompt_template:
              type: string
            query_prompt_template:
              type: string
            collections:
              type: array
              items:
                $ref: '#/components/schemas/collection'
        flow:
          $ref: '#/components/schemas/WorkflowDefinition'
    bot:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - knowledge
            - common
            - agent
          description: The type of bot
          example: knowledge
        config:
          $ref: '#/components/schemas/botConfig'
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    pageResult:
      description: PageResult info (deprecated, use paginatedResponse instead)
      properties:
        page_number:
          type: integer
          description: The page number
        page_size:
          type: integer
          description: The page size
        count:
          type: integer
          description: The total count of items
      type: object
    botList:
      type: object
      description: A list of bots
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/bot'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    failResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: '400'
        message:
          type: string
          description: Error message
          example: Invalid request
    botCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - knowledge
            - common
            - agent
          description: The type of bot
          example: knowledge
        config:
          $ref: '#/components/schemas/botConfig'
    botUpdate:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        config:
          $ref: '#/components/schemas/botConfig'
    debugFlowRequest:
      type: object
      properties:
        query:
          type: string
      required:
        - query
    chat:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        bot_id:
          type: string
        peer_id:
          type: string
        peer_type:
          type: string
          enum:
            - system
            - feishu
            - weixin
            - weixin_official
            - web
            - dingtalk
        status:
          type: string
          enum:
            - active
            - archived
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    paginatedResponse:
      type: object
      properties:
        total:
          type: integer
          minimum: 0
          description: Total number of items
          example: 100
        page:
          type: integer
          minimum: 1
          description: Current page number
          example: 1
        page_size:
          type: integer
          minimum: 1
          description: Number of items per page
          example: 10
        total_pages:
          type: integer
          minimum: 1
          description: Total number of pages
          example: 10
        has_next:
          type: boolean
          description: Whether there is a next page
          example: true
        has_prev:
          type: boolean
          description: Whether there is a previous page
          example: false
    chatList:
      type: object
      description: A list of chats with pagination
      allOf:
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/chat'
        - $ref: '#/components/schemas/paginatedResponse'
    chatCreate:
      type: object
      properties:
        title:
          type: string
    reference:
      type: object
      properties:
        score:
          type: number
        text:
          type: string
        image_uri:
          type: string
        metadata:
          type: object
          additionalProperties: true
    feedback:
      type: object
      properties:
        type:
          type: string
          enum:
            - good
            - bad
        tag:
          type: string
          enum:
            - Harmful
            - Unsafe
            - Fake
            - Unhelpful
            - Other
        message:
          type: string
    file:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    chatMessage:
      type: object
      properties:
        id:
          type: string
        part_id:
          type: string
        type:
          type: string
          enum:
            - welcome
            - message
            - start
            - stop
            - error
            - tool_call_result
            - thinking
            - references
        timestamp:
          type: number
        role:
          type: string
          enum:
            - human
            - ai
        data:
          type: string
        references:
          type: array
          items:
            $ref: '#/components/schemas/reference'
        urls:
          type: array
          items:
            type: string
        feedback:
          $ref: '#/components/schemas/feedback'
        files:
          type: array
          items:
            $ref: '#/components/schemas/file'
    chatDetails:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        bot_id:
          type: string
        peer_id:
          type: string
        peer_type:
          type: string
          enum:
            - system
            - feishu
            - weixin
            - weixin_official
            - web
            - dingtalk
        history:
          type: array
          description: Array of conversation turns, where each turn is an array of message parts
          items:
            type: array
            description: A conversation turn containing multiple message parts (thinking, content, references, etc.)
            items:
              $ref: '#/components/schemas/chatMessage'
        status:
          type: string
          enum:
            - active
            - archived
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    chatUpdate:
      type: object
      properties:
        title:
          type: string
    titleGenerateRequest:
      type: object
      properties:
        max_length:
          type: integer
          description: Maximum length of the generated title
          default: 20
          minimum: 6
          maximum: 50
        language:
          type: string
          description: Language for the title generation (IETF BCP 47 tag)
          default: zh-CN
          enum:
            - zh-CN
            - en-US
            - ja-JP
            - ko-KR
        turns:
          type: integer
          description: Number of most recent conversation turns to consider
          default: 1
          minimum: 1
    titleGenerateResponse:
      type: object
      properties:
        title:
          type: string
          description: Generated title string
      required:
        - title
    document:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          enum:
            - UPLOADED
            - EXPIRED
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
            - DELETING
            - DELETED
        vector_index_status:
          type: string
          enum:
            - PENDING
            - CREATING
            - ACTIVE
            - DELETING
            - DELETION_IN_PROGRESS
            - FAILED
            - SKIPPED
        fulltext_index_status:
          type: string
          enum:
            - PENDING
            - CREATING
            - ACTIVE
            - DELETING
            - DELETION_IN_PROGRESS
            - FAILED
            - SKIPPED
        graph_index_status:
          type: string
          enum:
            - PENDING
            - CREATING
            - ACTIVE
            - DELETING
            - DELETION_IN_PROGRESS
            - FAILED
            - SKIPPED
        summary_index_status:
          type: string
          enum:
            - PENDING
            - CREATING
            - ACTIVE
            - DELETING
            - DELETION_IN_PROGRESS
            - FAILED
            - SKIPPED
        vision_index_status:
          type: string
          enum:
            - PENDING
            - CREATING
            - ACTIVE
            - DELETING
            - DELETION_IN_PROGRESS
            - FAILED
            - SKIPPED
        vector_index_updated:
          type: string
          format: date-time
          description: Vector index last updated time
        fulltext_index_updated:
          type: string
          format: date-time
          description: Fulltext index last updated time
        graph_index_updated:
          type: string
          format: date-time
          description: Graph index last updated time
        summary_index_updated:
          type: string
          format: date-time
          description: Summary index last updated time
        vision_index_updated:
          type: string
          format: date-time
          description: Vision index last updated time
        summary:
          type: string
          description: Summary of the document
        size:
          type: number
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    collectionView:
      type: object
      description: Lightweight collection information for lists, MCP and agents
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - DELETED
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        is_published:
          type: boolean
          default: false
        published_at:
          type: string
          format: date-time
          nullable: true
          description: Publication time, null when not published
        owner_user_id:
          type: string
          description: Collection owner user ID
        owner_username:
          type: string
          nullable: true
          description: Collection owner username
        subscription_id:
          type: string
          nullable: true
          description: Subscription ID if this is a subscribed collection, null for owned collections
        subscribed_at:
          type: string
          format: date-time
          nullable: true
          description: Subscription time, null for owned collections
    collectionViewList:
      type: object
      description: A list of collection views
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/collectionView'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    collectionCreate:
      type: object
      properties:
        title:
          type: string
        config:
          $ref: '#/components/schemas/collectionConfig'
        type:
          type: string
        description:
          type: string
        source:
          $ref: '#/components/schemas/collectionSource'
    collectionUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        config:
          $ref: '#/components/schemas/collectionConfig'
        source:
          $ref: '#/components/schemas/collectionSource'
    documentList:
      type: object
      description: A list of documents with pagination
      allOf:
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/document'
        - $ref: '#/components/schemas/paginatedResponse'
    documentCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        source:
          type: string
        collection_id:
          type: string
    rebuildIndexesRequest:
      type: object
      properties:
        index_types:
          type: array
          items:
            type: string
            enum:
              - VECTOR
              - FULLTEXT
              - GRAPH
              - SUMMARY
              - VISION
          description: Types of indexes to rebuild
          minItems: 1
      required:
        - index_types
    visionChunk:
      type: object
      properties:
        id:
          type: string
        asset_id:
          type: string
        text:
          type: string
        metadata:
          type: object
    documentPreview:
      type: object
      properties:
        doc_object_path:
          type: string
          nullable: true
          description: The path to the document object.
        doc_filename:
          type: string
          description: The name of the document.
        converted_pdf_object_path:
          type: string
          nullable: true
          description: The path to the converted PDF object.
        markdown_content:
          type: string
          description: The markdown content of the document.
        chunks:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              text:
                type: string
              metadata:
                type: object
        vision_chunks:
          type: array
          items:
            $ref: '#/components/schemas/visionChunk'
    uploadDocumentResponse:
      type: object
      properties:
        document_id:
          type: string
          description: ID of the uploaded document
        filename:
          type: string
          description: Name of the uploaded file
        size:
          type: integer
          description: Size of the uploaded file in bytes
        status:
          type: string
          enum:
            - UPLOADED
            - PENDING
            - RUNNING
            - COMPLETE
            - FAILED
            - DELETED
            - EXPIRED
          description: Status of the document (UPLOADED for new uploads, or existing status for duplicate files)
      required:
        - document_id
        - filename
        - size
        - status
    confirmDocumentsRequest:
      type: object
      properties:
        document_ids:
          type: array
          items:
            type: string
          description: List of document IDs to confirm
          minItems: 1
      required:
        - document_ids
    confirmDocumentsResponse:
      type: object
      properties:
        confirmed_count:
          type: integer
          description: Number of documents successfully confirmed
        failed_count:
          type: integer
          description: Number of documents that failed to confirm
        failed_documents:
          type: array
          items:
            type: object
            properties:
              document_id:
                type: string
              name:
                type: string
                description: Name of the document
              error:
                type: string
          description: Details of failed confirmations
      required:
        - confirmed_count
        - failed_count
    vectorSearchParams:
      type: object
      properties:
        topk:
          type: integer
          description: Top K results
        similarity:
          type: number
          description: Similarity threshold
          minimum: 0
          maximum: 1
    fulltextSearchParams:
      type: object
      properties:
        topk:
          type: integer
          description: Top K results
        keywords:
          type: array
          items:
            type: string
          description: Custom keywords to use for fulltext search
    graphSearchParams:
      type: object
      properties:
        topk:
          type: integer
          description: Top K results
    summarySearchParams:
      type: object
      properties:
        topk:
          type: integer
          description: Top K results
        similarity:
          type: number
          description: Similarity threshold
          minimum: 0
          maximum: 1
    visionSearchParams:
      type: object
      properties:
        topk:
          type: integer
          description: Top K results
        similarity:
          type: number
          description: Similarity threshold
          minimum: 0
          maximum: 1
    searchResultItem:
      type: object
      properties:
        rank:
          type: integer
          description: Result rank
        score:
          type: number
          description: Result score
        content:
          type: string
          description: Result content
        source:
          type: string
          description: Source document or metadata
        recall_type:
          type: string
          description: Recall type
          enum:
            - vector_search
            - graph_search
            - fulltext_search
            - summary_search
            - vision_search
        metadata:
          type: object
          description: Metadata of the result
    searchResult:
      type: object
      properties:
        id:
          type: string
          description: The id of the search result
        query:
          type: string
        vector_search:
          $ref: '#/components/schemas/vectorSearchParams'
        fulltext_search:
          $ref: '#/components/schemas/fulltextSearchParams'
        graph_search:
          $ref: '#/components/schemas/graphSearchParams'
        summary_search:
          $ref: '#/components/schemas/summarySearchParams'
        vision_search:
          $ref: '#/components/schemas/visionSearchParams'
        items:
          type: array
          items:
            $ref: '#/components/schemas/searchResultItem'
        created:
          type: string
          format: date-time
          description: The creation time of the search result
    searchResultList:
      type: object
      description: A list of search results
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/searchResult'
    searchRequest:
      type: object
      description: Search request
      properties:
        query:
          type: string
        vector_search:
          $ref: '#/components/schemas/vectorSearchParams'
        fulltext_search:
          $ref: '#/components/schemas/fulltextSearchParams'
        graph_search:
          $ref: '#/components/schemas/graphSearchParams'
        summary_search:
          $ref: '#/components/schemas/summarySearchParams'
        vision_search:
          $ref: '#/components/schemas/visionSearchParams'
        save_to_history:
          type: boolean
          description: Whether to save search result to database history
          default: false
          example: true
        rerank:
          type: boolean
          description: Whether to enable rerank for search results
          default: false
          example: true
    Settings:
      type: object
      properties:
        use_mineru:
          type: boolean
          description: Whether to use MinerU
        mineru_api_token:
          type: string
          description: API token for MinerU
    graphLabelsResponse:
      type: object
      description: Response containing available graph labels
      properties:
        labels:
          type: array
          items:
            type: string
          description: List of available node labels in the knowledge graph
          example:
            - 墨香居
            - 李明华
            - 林晓雯
            - 深夜读书会
      required:
        - labels
    graphNode:
      type: object
      description: Knowledge graph node representing an entity
      properties:
        id:
          type: string
          description: Unique identifier for the node (entity name)
          example: 墨香居
        labels:
          type: array
          items:
            type: string
          description: Labels associated with the node
          example:
            - 墨香居
        properties:
          type: object
          description: Node properties containing entity metadata
          properties:
            entity_id:
              type: string
              description: Entity identifier
              example: 墨香居
            entity_type:
              type: string
              description: Type of the entity
              example: organization
            description:
              type: string
              description: Description of the entity
              example: 墨香居是这条老巷子里唯一的旧书店，经营着各种书籍，承载了老板李明华的情怀。
            source_id:
              type: string
              description: Source chunk ID where entity was extracted
              example: chunk-88845945407136e9498f5f594c8a00c6
            file_path:
              type: string
              description: Source file path
              example: story.txt
            created_at:
              type: integer
              format: int64
              description: Creation timestamp
              example: 1751356233
          additionalProperties: true
      required:
        - id
        - labels
        - properties
    graphEdge:
      type: object
      description: Knowledge graph edge representing a relationship
      properties:
        id:
          type: string
          description: Unique identifier for the edge
          example: 墨香居-深夜读书会
        type:
          type: string
          description: Type of the relationship
          example: DIRECTED
          default: DIRECTED
        source:
          type: string
          description: Source node ID
          example: 墨香居
        target:
          type: string
          description: Target node ID
          example: 深夜读书会
        properties:
          type: object
          description: Edge properties containing relationship metadata
          properties:
            weight:
              type: number
              format: float
              description: Relationship weight/strength
              example: 9
            description:
              type: string
              description: Description of the relationship
              example: 深夜读书会是墨香居的新活动，旨在提升书店的活力和吸引顾客。
            keywords:
              type: string
              description: Keywords associated with the relationship
              example: 书店活力,活动
            source_id:
              type: string
              description: Source chunk ID where relationship was extracted
              example: chunk-88845945407136e9498f5f594c8a00c6
            file_path:
              type: string
              description: Source file path
              example: story.txt
            created_at:
              type: integer
              format: int64
              description: Creation timestamp
              example: 1751356233
          additionalProperties: true
      required:
        - id
        - source
        - target
        - properties
    knowledgeGraph:
      type: object
      description: Knowledge graph containing nodes and edges
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/graphNode'
          description: List of nodes in the knowledge graph
        edges:
          type: array
          items:
            $ref: '#/components/schemas/graphEdge'
          description: List of edges in the knowledge graph
        is_truncated:
          type: boolean
          description: Whether the graph was truncated due to size limits
          example: false
          default: false
      required:
        - nodes
        - edges
        - is_truncated
    targetEntityDataRequest:
      type: object
      description: Optional target entity configuration. If not specified, auto-select entity with highest degree.
      properties:
        entity_name:
          type: string
          description: Target entity name. If not specified, auto-select entity with highest degree
        entity_type:
          type: string
          description: Entity type for the target entity
        description:
          type: string
          description: Description for the target entity
        source_id:
          type: string
          description: Source ID for the target entity
        file_path:
          type: string
          description: File path for the target entity
      nullable: true
    nodeMergeRequest:
      type: object
      description: |
        Request to merge multiple graph nodes directly using entity IDs.
      properties:
        entity_ids:
          type: array
          items:
            type: string
          description: List of entity IDs to merge directly
          example:
            - 墨香居
            - 书店
            - 旧书店
          minItems: 1
        target_entity_data:
          $ref: '#/components/schemas/targetEntityDataRequest'
      required:
        - entity_ids
      additionalProperties: false
      example:
        entity_ids:
          - 墨香居
          - 书店
          - 旧书店
    targetEntityDataResponse:
      type: object
      description: Complete data of the target entity after merge
      properties:
        entity_name:
          type: string
          description: The entity name that was kept (merge target)
          example: 墨香居
        entity_type:
          type: string
          description: Entity type of the target entity
          example: ORGANIZATION
        description:
          type: string
          description: Merged description of the target entity
          example: 墨香居是这条老巷子里唯一的旧书店，经营着各种书籍，承载了老板李明华的情怀。
        source_id:
          type: string
          description: Source ID information
          example: chunk-001,chunk-002
        file_path:
          type: string
          description: File path information
          example: story.txt,book.txt
      required:
        - entity_name
        - entity_type
        - description
    nodeMergeResponse:
      type: object
      description: Response containing node merge results
      properties:
        status:
          type: string
          description: Status of the merge operation
          example: success
          enum:
            - success
            - error
        message:
          type: string
          description: Detailed message about the merge operation
          example: Successfully merged 2 entities into 墨香居
        entity_ids:
          type: array
          items:
            type: string
          description: Entity IDs that were merged
          example:
            - 墨香居
            - 书店
            - 旧书店
        target_entity_data:
          $ref: '#/components/schemas/targetEntityDataResponse'
        source_entities:
          type: array
          items:
            type: string
          description: List of entities that were merged into the target
          example:
            - 书店
            - 旧书店
        redirected_edges:
          type: integer
          description: Number of edges that were redirected during merge
          example: 12
          minimum: 0
        merged_description_length:
          type: integer
          description: Length of the merged description
          example: 512
          minimum: 0
        suggestion_id:
          type: string
          description: Suggestion ID if this merge was based on a suggestion
          example: msug123
          nullable: true
      required:
        - status
        - message
        - entity_ids
        - target_entity_data
        - source_entities
        - redirected_edges
        - merged_description_length
    mergeSuggestionsRequest:
      type: object
      description: Request for generating node merge suggestions
      properties:
        max_suggestions:
          type: integer
          minimum: 1
          maximum: 100
          default: 50
          description: Maximum number of merge suggestions to return
          example: 50
        max_concurrent_llm_calls:
          type: integer
          minimum: 1
          maximum: 16
          default: 4
          description: Maximum number of concurrent LLM calls for batch analysis
          example: 4
        force_refresh:
          type: boolean
          default: false
          description: Force regeneration of suggestions even if valid cached suggestions exist
          example: false
    mergeSuggestionTargetEntity:
      type: object
      description: Suggested target entity for merge
      properties:
        entity_name:
          type: string
          description: Suggested entity name after merge
          example: 墨香居
        entity_type:
          type: string
          description: Suggested entity type after merge
          example: ORGANIZATION
      required:
        - entity_name
        - entity_type
    mergeSuggestionItem:
      type: object
      description: Individual merge suggestion item
      properties:
        id:
          type: string
          description: Suggestion ID
          example: msug123
        collection_id:
          type: string
          description: Collection ID
          example: col123
        suggestion_batch_id:
          type: string
          description: Suggestion batch ID
          example: batch456
        entity_ids:
          type: array
          items:
            type: string
          description: Entity IDs suggested for merging
          example:
            - 墨香居
            - 书店
            - 旧书店
        confidence_score:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: LLM confidence score for this merge suggestion
          example: 0.85
        merge_reason:
          type: string
          description: LLM-generated reason for suggesting this merge
          example: 两个实体都描述同一个书店，'墨香居'是具体名称，'旧书店'是通用描述，应该合并为同一实体
        suggested_target_entity:
          $ref: '#/components/schemas/mergeSuggestionTargetEntity'
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
            - EXPIRED
          description: Status of the suggestion
          example: PENDING
        created:
          type: string
          format: date-time
          description: Creation timestamp
          example: '2025-01-07T10:00:00Z'
        operated_at:
          type: string
          format: date-time
          description: User operation timestamp
          example: '2025-01-08T15:30:00Z'
          nullable: true
      required:
        - id
        - collection_id
        - suggestion_batch_id
        - entity_ids
        - confidence_score
        - merge_reason
        - suggested_target_entity
        - status
        - created
    mergeSuggestionsResponse:
      type: object
      description: Response containing node merge suggestions
      properties:
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/mergeSuggestionItem'
          description: List of merge suggestions ordered by confidence score (highest first)
        total_analyzed_nodes:
          type: integer
          description: Total number of nodes analyzed
          example: 156
          minimum: 0
        processing_time_seconds:
          type: number
          format: float
          description: Processing time in seconds
          example: 12.5
          minimum: 0
        from_cache:
          type: boolean
          description: Whether suggestions were loaded from cache
          example: false
          default: false
        generated_at:
          type: string
          format: date-time
          description: Generation timestamp
          example: '2025-01-07T10:00:00Z'
        total_suggestions:
          type: integer
          description: Total number of suggestions
          example: 5
          minimum: 0
        pending_count:
          type: integer
          description: Number of pending suggestions
          example: 3
          minimum: 0
        accepted_count:
          type: integer
          description: Number of accepted suggestions
          example: 1
          minimum: 0
        rejected_count:
          type: integer
          description: Number of rejected suggestions
          example: 1
          minimum: 0
      required:
        - suggestions
        - total_analyzed_nodes
        - processing_time_seconds
        - from_cache
        - generated_at
        - total_suggestions
        - pending_count
        - accepted_count
        - rejected_count
    suggestionActionRequest:
      type: object
      description: Request to take action on a merge suggestion
      properties:
        action:
          type: string
          enum:
            - accept
            - reject
          description: Action to take on the suggestion (case-insensitive, e.g., 'Accept', 'REJECT', 'accept')
          example: accept
        target_entity_data:
          $ref: '#/components/schemas/targetEntityDataRequest'
          description: Optional override for target entity data (only used when action is 'accept')
      required:
        - action
      additionalProperties: false
      example:
        action: accept
    suggestionActionResponse:
      type: object
      description: Response containing suggestion action results
      properties:
        status:
          type: string
          description: Status of the action operation
          example: success
          enum:
            - success
            - error
        message:
          type: string
          description: Detailed message about the action operation
          example: Suggestion msug123 has been accepted and merge completed
        suggestion_id:
          type: string
          description: The suggestion ID that was processed
          example: msug123
        action:
          type: string
          enum:
            - accept
            - reject
          description: The action that was performed (normalized to lowercase)
          example: accept
        merge_result:
          $ref: '#/components/schemas/nodeMergeResponse'
          description: Merge operation result (only present when action is 'accept')
          nullable: true
      required:
        - status
        - message
        - suggestion_id
        - action
    SharingStatusResponse:
      type: object
      description: Simple sharing status response
      properties:
        is_published:
          type: boolean
          description: Whether published to marketplace
        published_at:
          type: string
          format: date-time
          nullable: true
          description: Publication time, null when not published
      required:
        - is_published
    SharedCollectionConfig:
      type: object
      description: Configuration settings for shared collection features
      properties:
        enable_vector:
          type: boolean
          description: Whether vector search is enabled
          default: true
        enable_fulltext:
          type: boolean
          description: Whether fulltext search is enabled
          default: true
        enable_knowledge_graph:
          type: boolean
          description: Whether knowledge graph is enabled
          default: true
        enable_summary:
          type: boolean
          description: Whether summary generation is enabled
          default: false
        enable_vision:
          type: boolean
          description: Whether vision processing is enabled
          default: false
      required:
        - enable_vector
        - enable_fulltext
        - enable_knowledge_graph
        - enable_summary
        - enable_vision
    SharedCollection:
      type: object
      description: Shared Collection information for marketplace users
      properties:
        id:
          type: string
          description: Collection ID
        title:
          type: string
          description: Collection title
        description:
          type: string
          nullable: true
          description: Collection description
        owner_user_id:
          type: string
          description: Original owner user ID
        owner_username:
          type: string
          nullable: true
          description: Original owner username
        subscription_id:
          type: string
          nullable: true
          description: Subscription record ID (has value if subscribed, null if not subscribed)
        gmt_subscribed:
          type: string
          format: date-time
          nullable: true
          description: Subscription time (only has value when subscribed)
        config:
          $ref: '#/components/schemas/SharedCollectionConfig'
          description: Collection configuration settings
      required:
        - id
        - title
        - owner_user_id
        - config
    SharedCollectionList:
      type: object
      description: Shared Collection list response
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SharedCollection'
          description: List of shared Collections
        total:
          type: integer
          description: Total count (for pagination)
        page:
          type: integer
          description: Current page number
        page_size:
          type: integer
          description: Page size
      required:
        - items
        - total
        - page
        - page_size
    apiKey:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_used_at:
          type: string
          format: date-time
    apiKeyList:
      type: object
      description: A list of API keys
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiKey'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    apiKeyCreate:
      type: object
      properties:
        description:
          type: string
    apiKeyUpdate:
      type: object
      properties:
        description:
          type: string
    tagFilterCondition:
      type: object
      properties:
        operation:
          type: string
          enum:
            - AND
            - OR
          description: Logical operation for tags in this condition
          example: AND
        tags:
          type: array
          items:
            type: string
          description: List of tags for this condition
          example:
            - free
            - recommend
      required:
        - operation
        - tags
    tagFilterRequest:
      type: object
      properties:
        tag_filters:
          type: array
          items:
            $ref: '#/components/schemas/tagFilterCondition'
          description: List of tag filter conditions (OR relationship between conditions). If not provided or empty, returns models with "recommend" tag by default.
          example:
            - operation: AND
              tags:
                - free
                - recommend
            - operation: OR
              tags:
                - openai
                - gpt
      description: Tag filtering request. Empty request body or empty tag_filters returns recommend models by default.
    modelConfig:
      type: object
      properties:
        name:
          type: string
        completion_dialect:
          type: string
        embedding_dialect:
          type: string
        rerank_dialect:
          type: string
        label:
          type: string
        allow_custom_base_url:
          type: boolean
        base_url:
          type: string
        embedding:
          type: array
          items:
            $ref: '#/components/schemas/modelSpec'
        completion:
          type: array
          items:
            $ref: '#/components/schemas/modelSpec'
        rerank:
          type: array
          items:
            $ref: '#/components/schemas/modelSpec'
    modelConfigList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/modelConfig'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    defaultModelConfig:
      type: object
      properties:
        scenario:
          type: string
          enum:
            - default_for_collection_completion
            - default_for_agent_completion
            - default_for_embedding
            - default_for_rerank
            - default_for_background_task
          description: The scenario for which this default model is configured
          example: default_for_embedding
        provider_name:
          type: string
          nullable: true
          description: The name of the model provider
          example: openai
        model:
          type: string
          nullable: true
          description: The name of the model
          example: text-embedding-3-small
      required:
        - scenario
    defaultModelsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/defaultModelConfig'
          description: List of default model configurations for different scenarios
      required:
        - items
    defaultModelsUpdateRequest:
      type: object
      properties:
        defaults:
          type: array
          items:
            $ref: '#/components/schemas/defaultModelConfig'
          description: List of default model configurations to update
          example:
            - scenario: default_for_embedding
              provider_name: openai
              model: text-embedding-3-small
            - scenario: default_for_collection_completion
              provider_name: openai
              model: gpt-4o-mini
      required:
        - defaults
    llmProvider:
      type: object
      properties:
        name:
          type: string
          description: Unique provider name identifier
          example: openai
        user_id:
          type: string
          description: User ID of the provider owner, "public" for system providers
          example: public
        label:
          type: string
          description: Human-readable provider display name
          example: OpenAI
        completion_dialect:
          type: string
          description: API dialect for completion/chat APIs
          example: openai
          default: openai
        embedding_dialect:
          type: string
          description: API dialect for embedding APIs
          example: openai
          default: openai
        rerank_dialect:
          type: string
          description: API dialect for rerank APIs
          example: jina_ai
          default: jina_ai
        allow_custom_base_url:
          type: boolean
          description: Whether custom base URLs are allowed
          default: false
        base_url:
          type: string
          description: Default API base URL for this provider
          example: https://api.openai.com/v1
        extra:
          type: string
          description: Additional configuration data in JSON format
        api_key:
          type: string
          description: API key for this provider (if configured by user)
        created:
          type: string
          format: date-time
          description: Creation timestamp
        updated:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - name
        - user_id
        - label
        - base_url
    llmProviderModel:
      type: object
      properties:
        provider_name:
          type: string
          description: Reference to LLMProvider.name
          example: openai
        api:
          type: string
          enum:
            - completion
            - embedding
            - rerank
          description: API type for this model
          example: completion
        model:
          type: string
          description: Model name/identifier
          example: gpt-4o-mini
        custom_llm_provider:
          type: string
          description: Custom LLM provider implementation
          example: openai
        context_window:
          type: integer
          description: Context window size (total tokens)
          example: 128000
        max_input_tokens:
          type: integer
          description: Maximum input tokens
          example: 120000
        max_output_tokens:
          type: integer
          description: Maximum output tokens
          example: 8000
        tags:
          type: array
          items:
            type: string
          description: Tags for model categorization
          example:
            - free
            - recommend
          default: []
        created:
          type: string
          format: date-time
          description: Creation timestamp
        updated:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - provider_name
        - api
        - model
        - custom_llm_provider
    llmConfigurationResponse:
      type: object
      properties:
        providers:
          type: array
          items:
            $ref: '#/components/schemas/llmProvider'
          description: List of LLM providers
          default: []
        models:
          type: array
          items:
            $ref: '#/components/schemas/llmProviderModel'
          description: List of LLM provider models
          default: []
      required:
        - providers
        - models
    llmProviderCreateWithApiKey:
      type: object
      properties:
        name:
          type: string
          description: Unique provider name identifier (auto-generated if not provided)
        label:
          type: string
          description: Human-readable provider display name
        completion_dialect:
          type: string
          description: API dialect for completion/chat APIs
          default: openai
        embedding_dialect:
          type: string
          description: API dialect for embedding APIs
          default: openai
        rerank_dialect:
          type: string
          description: API dialect for rerank APIs
          default: jina_ai
        allow_custom_base_url:
          type: boolean
          description: Whether custom base URLs are allowed
          default: false
        base_url:
          type: string
          description: Default API base URL for this provider
        extra:
          type: string
          description: Additional configuration data in JSON format
        api_key:
          type: string
          description: Optional API key for this provider
        status:
          type: string
          enum:
            - enable
            - disable
          description: Provider status - enable to create/update API key, disable to remove API key
      required:
        - label
        - base_url
    llmProviderUpdateWithApiKey:
      type: object
      properties:
        label:
          type: string
          description: Human-readable provider display name
        completion_dialect:
          type: string
          description: API dialect for completion/chat APIs
        embedding_dialect:
          type: string
          description: API dialect for embedding APIs
        rerank_dialect:
          type: string
          description: API dialect for rerank APIs
        allow_custom_base_url:
          type: boolean
          description: Whether custom base URLs are allowed
        base_url:
          type: string
          description: Default API base URL for this provider
        extra:
          type: string
          description: Additional configuration data in JSON format
        api_key:
          type: string
          description: Optional API key for this provider
        status:
          type: string
          enum:
            - enable
            - disable
          description: Provider status - enable to create/update API key, disable to remove API key
    llmProviderModelList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/llmProviderModel'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    llmProviderModelCreate:
      type: object
      properties:
        provider_name:
          type: string
          description: Reference to LLMProvider.name
        api:
          type: string
          enum:
            - completion
            - embedding
            - rerank
          description: API type for this model
        model:
          type: string
          description: Model name/identifier
        custom_llm_provider:
          type: string
          description: Custom LLM provider implementation
        context_window:
          type: integer
          description: Context window size (total tokens)
          example: 128000
        max_input_tokens:
          type: integer
          description: Maximum input tokens
          example: 120000
        max_output_tokens:
          type: integer
          description: Maximum output tokens
          example: 8000
        tags:
          type: array
          items:
            type: string
          description: Tags for model categorization
          default: []
      required:
        - provider_name
        - api
        - model
        - custom_llm_provider
    llmProviderModelUpdate:
      type: object
      properties:
        custom_llm_provider:
          type: string
          description: Custom LLM provider implementation
        context_window:
          type: integer
          description: Context window size (total tokens)
          example: 128000
        max_input_tokens:
          type: integer
          description: Maximum input tokens
          example: 120000
        max_output_tokens:
          type: integer
          description: Maximum output tokens
          example: 8000
        tags:
          type: array
          items:
            type: string
          description: Tags for model categorization
    embeddingRequest:
      type: object
      description: Request to generate embeddings for text inputs
      properties:
        provider:
          type: string
          description: LLM provider name (e.g., openai, anthropic)
          example: openai
        model:
          type: string
          description: Model name for embedding generation
          example: text-embedding-3-small
        input:
          oneOf:
            - type: string
              description: Single text input to embed
              example: The food was delicious and the waiter was very attentive.
            - type: array
              description: List of text inputs to embed
              items:
                type: string
              example:
                - The food was delicious and the waiter was very attentive.
                - I had a wonderful experience at this restaurant.
      required:
        - provider
        - model
        - input
    embeddingData:
      type: object
      description: Individual embedding result
      properties:
        object:
          type: string
          description: Object type identifier
          example: embedding
          default: embedding
        embedding:
          type: array
          description: The embedding vector as a list of floats
          items:
            type: number
            format: float
          example:
            - 0.0023064255
            - -0.009327292
            - 0.015797421
            - 0.0012345678
        index:
          type: integer
          description: Index of the input text corresponding to this embedding
          example: 0
      required:
        - object
        - embedding
        - index
    embeddingUsage:
      type: object
      description: Token usage information for the embedding request
      properties:
        prompt_tokens:
          type: integer
          description: Number of tokens in the input text(s)
          example: 16
        total_tokens:
          type: integer
          description: Total number of tokens used (same as prompt_tokens for embeddings)
          example: 16
      required:
        - prompt_tokens
        - total_tokens
    embeddingResponse:
      type: object
      description: Response containing generated embeddings in OpenAI-compatible format
      properties:
        object:
          type: string
          description: Object type identifier
          example: list
          default: list
        data:
          type: array
          description: List of embedding results
          items:
            $ref: '#/components/schemas/embeddingData'
        model:
          type: string
          description: Model used for embedding generation
          example: text-embedding-3-small
        usage:
          $ref: '#/components/schemas/embeddingUsage'
      required:
        - object
        - data
        - model
        - usage
    rerankRequest:
      type: object
      description: Request to rerank documents based on query relevance
      properties:
        provider:
          type: string
          description: LLM provider name (e.g., cohere, jina_ai)
          example: cohere
        model:
          type: string
          description: Model name for reranking
          example: rerank-english-v3.0
        query:
          type: string
          description: Search query to rank documents against
          example: What is the capital of France?
        documents:
          oneOf:
            - type: array
              description: List of text documents to rerank
              items:
                type: string
              example:
                - Paris is the capital of France.
                - London is the capital of England.
                - Berlin is the capital of Germany.
            - type: array
              description: List of document objects with text and optional metadata
              items:
                type: object
                properties:
                  text:
                    type: string
                    description: Document text content
                    example: Paris is the capital of France.
                  metadata:
                    type: object
                    description: Optional document metadata
                    additionalProperties: true
                    example:
                      id: doc_123
                      source: wikipedia
                required:
                  - text
              example:
                - text: Paris is the capital of France.
                  metadata:
                    id: doc_1
                    source: wikipedia
                - text: London is the capital of England.
                  metadata:
                    id: doc_2
                    source: encyclopedia
        top_k:
          type: integer
          description: Maximum number of top-ranked documents to return
          minimum: 1
          maximum: 1000
          default: 10
          example: 3
        return_documents:
          type: boolean
          description: Whether to return document content in response
          default: true
          example: true
      required:
        - provider
        - model
        - query
        - documents
    rerankDocument:
      type: object
      description: Individual reranked document result
      properties:
        index:
          type: integer
          description: Original index of the document in the input array
          example: 0
        relevance_score:
          type: number
          format: float
          description: Relevance score between 0 and 1 (higher is more relevant)
          minimum: 0
          maximum: 1
          example: 0.95
        document:
          type: object
          description: Document content and metadata (only present if return_documents=true)
          properties:
            text:
              type: string
              description: Document text content
              example: Paris is the capital of France.
            metadata:
              type: object
              description: Document metadata if provided in the request
              additionalProperties: true
              example:
                id: doc_123
                source: wikipedia
          required:
            - text
      required:
        - index
        - relevance_score
    rerankUsage:
      type: object
      description: Token usage information for the rerank request
      properties:
        total_tokens:
          type: integer
          description: Total number of tokens processed (query + all documents)
          example: 156
      required:
        - total_tokens
    rerankResponse:
      type: object
      description: Response containing reranked documents in industry-standard format
      properties:
        object:
          type: string
          description: Object type identifier
          example: list
          default: list
        data:
          type: array
          description: List of reranked documents ordered by relevance (highest first)
          items:
            $ref: '#/components/schemas/rerankDocument'
        model:
          type: string
          description: Model used for reranking
          example: rerank-english-v3.0
        usage:
          $ref: '#/components/schemas/rerankUsage'
      required:
        - object
        - data
        - model
        - usage
    config:
      type: object
      properties:
        admin_user_exists:
          type: boolean
          description: Whether the admin user exists
        auth:
          type: object
          properties:
            type:
              type: string
              enum:
                - none
                - auth0
                - authing
                - logto
                - cookie
            auth0:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
            authing:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
            logto:
              type: object
              properties:
                auth_domain:
                  type: string
                auth_app_id:
                  type: string
        login_methods:
          type: array
          items:
            type: string
          description: Available login methods
          example:
            - local
            - google
            - github
    promptTemplate:
      type: object
      properties:
        name:
          type: string
        prompt:
          type: string
        description:
          type: string
    promptTemplateList:
      type: object
      description: A list of prompt templates
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/promptTemplate'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    auditLog:
      type: object
      description: Audit log entry
      properties:
        id:
          type: string
          description: Audit log ID
        user_id:
          type: string
          nullable: true
          description: User ID who performed the action
        username:
          type: string
          nullable: true
          description: Username for display
        resource_type:
          type: string
          enum:
            - collection
            - document
            - bot
            - chat
            - message
            - api_key
            - llm
            - llm_provider
            - llm_provider_model
            - model_service_provider
            - user
            - flow
            - search
            - index
          nullable: true
          description: Type of resource
        resource_id:
          type: string
          nullable: true
          description: ID of the resource (extracted at query time)
        api_name:
          type: string
          description: API operation name
        http_method:
          type: string
          description: HTTP method (POST, PUT, DELETE)
        path:
          type: string
          description: API path
        status_code:
          type: integer
          nullable: true
          description: HTTP status code
        start_time:
          type: integer
          format: int64
          description: Request start time (milliseconds since epoch)
        end_time:
          type: integer
          format: int64
          nullable: true
          description: Request end time (milliseconds since epoch)
        duration_ms:
          type: integer
          nullable: true
          description: Request duration in milliseconds (calculated)
        request_data:
          type: string
          nullable: true
          description: Request data (JSON string)
        response_data:
          type: string
          nullable: true
          description: Response data (JSON string)
        error_message:
          type: string
          nullable: true
          description: Error message if failed
        ip_address:
          type: string
          nullable: true
          description: Client IP address
        user_agent:
          type: string
          nullable: true
          description: User agent string
        request_id:
          type: string
          description: Request ID for tracking
        created:
          type: string
          format: date-time
          description: Created timestamp
    auditLogList:
      type: object
      description: List of audit logs with pagination
      allOf:
        - type: object
          properties:
            items:
              type: array
              description: Audit log entries
              items:
                $ref: '#/components/schemas/auditLog'
        - $ref: '#/components/schemas/paginatedResponse'
    invitationCreate:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        role:
          type: string
          description: The role of the user (admin, rw, ro)
          enum:
            - admin
            - rw
            - ro
    invitation:
      type: object
      properties:
        email:
          type: string
          description: The email of the user
        token:
          type: string
          description: The token of the invitation
        created_by:
          type: string
          description: The ID of the user who created the invitation
        created_at:
          type: string
          description: The date and time the invitation was created
        is_valid:
          type: boolean
          description: Whether the invitation is valid
        used_at:
          type: string
          description: The date and time the invitation was used
        role:
          type: string
          description: The role of the user (admin, rw, ro)
          enum:
            - admin
            - rw
            - ro
        expires_at:
          type: string
          description: The date and time the invitation will expire
    invitationList:
      type: object
      description: A list of invitations
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/invitation'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    register:
      type: object
      description: The email of the user
      properties:
        token:
          type: string
          description: The invitation token
        email:
          type: string
          description: The email of the user
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
    user:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        role:
          type: string
          description: The role of the user
        is_active:
          type: boolean
          description: Whether the user is active
        date_joined:
          type: string
          description: The date and time the user joined the system
        registration_source:
          type: string
          description: The registration source of the user (local, google, github, etc.)
    login:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password of the user
    userList:
      type: object
      description: A list of users
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/user'
        pageResult:
          $ref: '#/components/schemas/pageResult'
    changePassword:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
        old_password:
          type: string
          description: The old password of the user
        new_password:
          type: string
          description: The new password of the user
    quotaInfo:
      type: object
      description: Quota information for a specific quota type
      properties:
        quota_type:
          type: string
          description: Type of quota
          example: max_collection_count
        quota_limit:
          type: integer
          description: Maximum allowed usage
          example: 10
        current_usage:
          type: integer
          description: Current usage count
          example: 3
        remaining:
          type: integer
          description: Remaining quota available
          example: 7
      required:
        - quota_type
        - quota_limit
        - current_usage
        - remaining
    userQuotaInfo:
      type: object
      description: Complete quota information for a user
      properties:
        user_id:
          type: string
          description: User ID
          example: user123
        username:
          type: string
          description: Username
          example: john_doe
        email:
          type: string
          description: User email
          example: john@example.com
          nullable: true
        role:
          type: string
          description: User role
          example: rw
        quotas:
          type: array
          description: List of quota information
          items:
            $ref: '#/components/schemas/quotaInfo'
      required:
        - user_id
        - role
        - quotas
    userQuotaList:
      type: object
      description: List of user quota information (admin view)
      properties:
        items:
          type: array
          description: List of user quota information
          items:
            $ref: '#/components/schemas/userQuotaInfo'
      required:
        - items
    quotaUpdateRequest:
      type: object
      description: Request to update user quotas (supports both single and batch updates)
      properties:
        max_collection_count:
          type: integer
          description: New limit for collection count
          minimum: 0
          nullable: true
        max_document_count:
          type: integer
          description: New limit for document count
          minimum: 0
          nullable: true
        max_document_count_per_collection:
          type: integer
          description: New limit for documents per collection
          minimum: 0
          nullable: true
        max_bot_count:
          type: integer
          description: New limit for bot count
          minimum: 0
          nullable: true
      example:
        max_collection_count: 20
        max_document_count: 2000
        max_bot_count: 10
    quotaUpdateResponse:
      type: object
      description: Response after updating user quotas (supports both single and batch updates)
      properties:
        success:
          type: boolean
          description: Whether the update was successful
          example: true
        message:
          type: string
          description: Status message
          example: Quotas updated successfully
        user_id:
          type: string
          description: User ID that was updated
          example: user123
        updated_quotas:
          type: array
          description: List of updated quotas
          items:
            type: object
            properties:
              quota_type:
                type: string
                description: Type of quota that was updated
                example: max_collection_count
              old_limit:
                type: integer
                description: Previous quota limit
                example: 10
              new_limit:
                type: integer
                description: New quota limit
                example: 20
            required:
              - quota_type
              - old_limit
              - new_limit
      required:
        - success
        - message
        - user_id
        - updated_quotas
    systemDefaultQuotas:
      type: object
      description: System default quota configuration
      properties:
        max_collection_count:
          type: integer
          description: Default maximum collection count
          example: 10
          minimum: 0
        max_document_count:
          type: integer
          description: Default maximum document count
          example: 1000
          minimum: 0
        max_document_count_per_collection:
          type: integer
          description: Default maximum documents per collection
          example: 100
          minimum: 0
        max_bot_count:
          type: integer
          description: Default maximum bot count
          example: 5
          minimum: 0
      required:
        - max_collection_count
        - max_document_count
        - max_document_count_per_collection
        - max_bot_count
    systemDefaultQuotasResponse:
      type: object
      description: Response containing system default quotas
      properties:
        quotas:
          $ref: '#/components/schemas/systemDefaultQuotas'
      required:
        - quotas
    systemDefaultQuotasUpdateRequest:
      type: object
      description: Request to update system default quotas
      properties:
        quotas:
          $ref: '#/components/schemas/systemDefaultQuotas'
      required:
        - quotas
    systemDefaultQuotasUpdateResponse:
      type: object
      description: Response after updating system default quotas
      properties:
        success:
          type: boolean
          description: Whether the update was successful
          example: true
        message:
          type: string
          description: Status message
          example: System default quotas updated successfully
        quotas:
          $ref: '#/components/schemas/systemDefaultQuotas'
      required:
        - success
        - message
        - quotas
    webSearchRequest:
      type: object
      description: Web search request
      properties:
        query:
          type: string
          description: Search query for regular web search. Optional if only using LLM.txt discovery.
          example: ApeRAG 2025年最新发展
        max_results:
          type: integer
          description: Maximum number of results to return
          default: 5
          example: 5
        timeout:
          type: integer
          description: Request timeout in seconds
          default: 30
          example: 30
        locale:
          type: string
          description: Browser locale
          default: en-US
          example: en-US
        source:
          type: string
          description: Domain or URL for site-specific filtering. When provided with query, limits search results to this domain (e.g., 'site:vercel.com query').
          example: vercel.com
        search_llms_txt:
          type: string
          description: Domain for LLM.txt discovery search. When provided, performs additional LLM-optimized content discovery from the specified domain, independent of the main search. Results are merged with regular search results.
          example: anthropic.com
      required: []
    webSearchResultItem:
      type: object
      description: Individual web search result
      properties:
        rank:
          type: integer
          description: Result rank
          example: 1
        title:
          type: string
          description: Page title
          example: ApeRAG 2025年技术路线图
        url:
          type: string
          description: Page URL
          example: https://example.com/aperag-2025-roadmap
        snippet:
          type: string
          description: Page snippet
          example: ApeRAG在2025年将重点发展...
        domain:
          type: string
          description: Domain name
          example: example.com
        timestamp:
          type: string
          format: date-time
          description: Result timestamp
          example: '2025-01-01T00:00:00Z'
      required:
        - rank
        - title
        - url
        - snippet
        - domain
    webSearchResponse:
      type: object
      description: Web search response
      properties:
        query:
          type: string
          description: Original search query
        results:
          type: array
          description: List of search results
          items:
            $ref: '#/components/schemas/webSearchResultItem'
        total_results:
          type: integer
          description: Total number of results found
        search_time:
          type: number
          format: float
          description: Search time in seconds
      required:
        - query
        - results
    webReadRequest:
      type: object
      description: Web content reading request
      properties:
        url_list:
          type: array
          description: List of URLs to read (for single URL, use array with one element)
          items:
            type: string
          example:
            - https://example.com/article
        timeout:
          type: integer
          description: Request timeout in seconds
          default: 30
          example: 30
        locale:
          type: string
          description: Browser locale
          default: en-US
          example: en-US
        max_concurrent:
          type: integer
          description: Maximum concurrent requests for multiple URLs
          default: 3
          example: 3
      required:
        - url_list
    webReadResultItem:
      type: object
      description: Individual web content reading result
      properties:
        url:
          type: string
          description: Requested URL
        status:
          type: string
          enum:
            - success
            - error
          description: Processing status
        title:
          type: string
          description: Page title
        content:
          type: string
          description: Extracted content in Markdown format
        extracted_at:
          type: string
          format: date-time
          description: Content extraction timestamp
        word_count:
          type: integer
          description: Word count of content
        token_count:
          type: integer
          description: Estimated token count
        error:
          type: string
          description: Error message if failed
        error_code:
          type: string
          description: Error code if failed
      required:
        - url
        - status
    webReadResponse:
      type: object
      description: Web content reading response
      properties:
        results:
          type: array
          description: List of reading results
          items:
            $ref: '#/components/schemas/webReadResultItem'
        total_urls:
          type: integer
          description: Total number of URLs processed
        successful:
          type: integer
          description: Number of successful extractions
        failed:
          type: integer
          description: Number of failed extractions
        processing_time:
          type: number
          format: float
          description: Total processing time in seconds
      required:
        - results
        - total_urls
        - successful
        - failed
    QuestionSet:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        collection_id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        gmt_created:
          type: string
          format: date-time
        gmt_updated:
          type: string
          format: date-time
    QuestionSetList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/QuestionSet'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
    QuestionType:
      type: string
      enum:
        - FACTUAL
        - INFERENTIAL
        - USER_DEFINED
      description: Question type enumeration
    Question:
      type: object
      properties:
        id:
          type: string
        question_set_id:
          type: string
        question_type:
          $ref: '#/components/schemas/QuestionType'
        question_text:
          type: string
        ground_truth:
          type: string
        gmt_created:
          type: string
          format: date-time
        gmt_updated:
          type: string
          format: date-time
    QuestionSetCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        collection_id:
          type: string
        questions:
          type: array
          description: A list of questions. Maximum 1000 questions are allowed.
          items:
            $ref: '#/components/schemas/Question'
    LLMConfig:
      type: object
      properties:
        model_name:
          type: string
        model_service_provider:
          type: string
        custom_llm_provider:
          type: string
          nullable: true
    QuestionSetGenerate:
      type: object
      required:
        - collection_id
      properties:
        collection_id:
          type: string
        llm_config:
          $ref: '#/components/schemas/LLMConfig'
        question_count:
          type: integer
        prompt:
          type: string
    QuestionSetDetail:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        collection_id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        gmt_created:
          type: string
          format: date-time
        gmt_updated:
          type: string
          format: date-time
    QuestionSetUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    QuestionsAdd:
      type: object
      required:
        - questions
      properties:
        questions:
          type: array
          items:
            type: object
            required:
              - question_text
              - ground_truth
            properties:
              question_text:
                type: string
              ground_truth:
                type: string
              question_type:
                $ref: '#/components/schemas/QuestionType'
    QuestionUpdate:
      type: object
      properties:
        question_text:
          type: string
        ground_truth:
          type: string
        question_type:
          $ref: '#/components/schemas/QuestionType'
    EvaluationStatus:
      type: string
      enum:
        - PENDING
        - RUNNING
        - PAUSED
        - COMPLETED
        - FAILED
      description: Evaluation task lifecycle status
    Evaluation:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        name:
          type: string
        collection_id:
          type: string
        question_set_id:
          type: string
        agent_llm_config:
          $ref: '#/components/schemas/LLMConfig'
        judge_llm_config:
          $ref: '#/components/schemas/LLMConfig'
        status:
          $ref: '#/components/schemas/EvaluationStatus'
        error_message:
          type: string
        total_questions:
          type: integer
        completed_questions:
          type: integer
        average_score:
          type: number
          format: float
          nullable: true
        gmt_created:
          type: string
          format: date-time
        gmt_updated:
          type: string
          format: date-time
    EvaluationList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Evaluation'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
    EvaluationCreate:
      type: object
      required:
        - name
        - collection_id
        - question_set_id
        - agent_llm_config
        - judge_llm_config
      properties:
        name:
          type: string
        collection_id:
          type: string
        question_set_id:
          type: string
        agent_llm_config:
          $ref: '#/components/schemas/LLMConfig'
        judge_llm_config:
          $ref: '#/components/schemas/LLMConfig'
    EvaluationItemStatus:
      type: string
      enum:
        - PENDING
        - RUNNING
        - COMPLETED
        - FAILED
      description: Evaluation item lifecycle status
    EvaluationItem:
      type: object
      properties:
        id:
          type: string
        evaluation_id:
          type: string
        question_id:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/EvaluationItemStatus'
        question_text:
          type: string
        ground_truth:
          type: string
        rag_answer:
          type: string
          nullable: true
        rag_answer_details:
          type: object
          nullable: true
        llm_judge_score:
          type: integer
          nullable: true
        llm_judge_reasoning:
          type: string
          nullable: true
        gmt_created:
          type: string
          format: date-time
        gmt_updated:
          type: string
          format: date-time
    EvaluationDetail:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        collection_name:
          type: string
        question_set_name:
          type: string
        status:
          $ref: '#/components/schemas/EvaluationStatus'
        average_score:
          type: number
          format: float
          nullable: true
        config:
          type: object
          properties:
            collection_id:
              type: string
            question_set_id:
              type: string
            agent_llm_config:
              type: object
            judge_llm_config:
              type: object
        items:
          type: array
          items:
            $ref: '#/components/schemas/EvaluationItem'
        gmt_created:
          type: string
          format: date-time
    EvaluationChatWithAgentRequest:
      type: object
      required:
        - collection_id
        - agent_llm_config
        - question_text
      properties:
        collection_id:
          type: string
        agent_llm_config:
          $ref: '#/components/schemas/LLMConfig'
        question_text:
          type: string
        language:
          type: string
          nullable: true
    ChatSuccessResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/chatMessage'
    AgentErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: The type of the response, must be 'error'.
          enum:
            - error
        id:
          type: string
        data:
          type: string
          description: Error message
        timestamp:
          type: integer
    EvaluationChatWithAgentResponse:
      oneOf:
        - $ref: '#/components/schemas/ChatSuccessResponse'
        - $ref: '#/components/schemas/AgentErrorResponse'
    AgentMessage:
      type: object
      description: Message format for agent-type bots with additional capabilities
      properties:
        query:
          type: string
          description: User query
          example: Tell me about ApeRAG features
        collections:
          type: array
          items:
            $ref: '#/components/schemas/collection'
          description: List of collection objects to search in
          example:
            - id: col_123
              title: Example Collection
            - id: col_456
              title: Another Collection
        completion:
          $ref: '#/components/schemas/modelSpec'
          nullable: true
          description: Model specification for completion including provider and model details
        web_search_enabled:
          type: boolean
          description: Whether to enable web search
          example: true
          default: false
        language:
          type: string
          description: Language preference for the response
          example: en-US
          default: en-US
          enum:
            - en-US
            - zh-CN
            - zh-TW
            - ja-JP
            - ko-KR
            - fr-FR
            - de-DE
            - es-ES
            - it-IT
            - pt-BR
            - ru-RU
        files:
          type: array
          items:
            $ref: '#/components/schemas/file'
      required:
        - query
        - collections
  responses:
    failResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: '400'
        message:
          type: string
          description: Error message
          example: Invalid request
